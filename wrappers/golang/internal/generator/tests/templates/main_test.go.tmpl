package tests

import (
	"testing"	
	{{if .SupportsNTT -}}
	"fmt"
	
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/core"
	{{.Field}} "github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}"{{end}}
	{{if .SupportsNTT -}}
	ntt "github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}/ntt"{{end}}
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/runtime"

	{{if ne .GnarkImport "" -}}
	"github.com/consensys/gnark-crypto/ecc/{{.GnarkImport}}/fr/fft"
	{{end -}}
)

const (
	largestTestSize = 20
)
var DEVICE runtime.Device

{{if .SupportsNTT -}}
func initDomain({{if ne .GnarkImport "" -}}largestTestSize int, {{end -}}cfg core.NTTInitDomainConfig) runtime.EIcicleError {
	{{if ne .GnarkImport "" -}}
	rouMont, _ := fft.Generator(uint64(1 << largestTestSize))
	rou := rouMont.Bits()
	rouIcicle := {{.Field}}.{{.FieldPrefix}}Field{}
	limbs := core.ConvertUint64ArrToUint32Arr(rou[:])

	rouIcicle.FromLimbs(limbs)
	{{else -}}
	rouIcicle := {{.Field}}.{{.FieldPrefix}}Field{}
	rouIcicle.FromUint32({{.ROU}})
	{{end -}}
	e := ntt.InitDomain(rouIcicle, cfg)
	return e
}{{end}}

func TestMain(m *testing.M) {
	runtime.LoadBackendFromEnvOrDefault()
	devices, e := runtime.GetRegisteredDevices()
	if e != runtime.Success {
		panic("Failed to load registered devices")
	}
	for _, deviceType := range devices {
		DEVICE = runtime.CreateDevice(deviceType, 0)
		runtime.SetDevice(&DEVICE)

		{{if .SupportsNTT -}}// setup domain
		cfg := core.GetDefaultNTTInitDomainConfig()
		e = initDomain({{if ne .GnarkImport "" -}}largestTestSize, {{end -}}cfg)
		if e != runtime.Success {
			if e != runtime.ApiNotImplemented {
				fmt.Println("initDomain is not implemented for ", deviceType, " device type")
			} else {
				panic("initDomain failed")
			}
		}{{end}}

		// execute tests
		m.Run()

		{{if .SupportsNTT -}}// release domain
		e = ntt.ReleaseDomain()
		if e != runtime.Success {
			if e != runtime.ApiNotImplemented {
				fmt.Println("ReleaseDomain is not implemented for ", deviceType, " device type")
			} else {
				panic("ReleaseDomain failed")
			}
		}{{end}}
	}
}
