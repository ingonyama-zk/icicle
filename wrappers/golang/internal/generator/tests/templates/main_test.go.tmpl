package tests

import (
	{{if .SupportsNTT -}}"fmt"{{end}}
	"os"
	"sync"
	"testing"

	{{if ne .GnarkImport "" -}}
	"github.com/consensys/gnark-crypto/ecc/{{.GnarkImport}}/fr/fft"
	{{end -}}
	{{if .SupportsNTT -}}
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/core"
	{{.Field}} "github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}"{{end}}
	{{if .SupportsNTT -}}
	ntt "github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}/ntt"{{end}}
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/internal/test_helpers"
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/runtime"
	"github.com/stretchr/testify/suite"
)

const (
	largestTestSize = 20
)

{{if .SupportsNTT -}}
func initDomain({{if ne .GnarkImport "" -}}largestTestSize int, {{end -}}cfg core.NTTInitDomainConfig) runtime.EIcicleError {
	{{if ne .GnarkImport "" -}}
	rouMont, _ := fft.Generator(uint64(1 << largestTestSize))
	rou := rouMont.Bits()
	rouIcicle := {{.Field}}.{{.FieldPrefix}}Field{}
	limbs := core.ConvertUint64ArrToUint32Arr(rou[:])

	rouIcicle.FromLimbs(limbs)
	{{else -}}
	rouIcicle := {{.Field}}.{{.FieldPrefix}}Field{}
	rouIcicle.FromUint32({{.ROU}})
	{{end -}}
	e := ntt.InitDomain(rouIcicle, cfg)
	return e
}{{end}}

func testWrapper(suite *suite.Suite, fn func(*suite.Suite)) func() {
	return func() {
		wg := sync.WaitGroup{}
		wg.Add(1)
		runtime.RunOnDevice(&test_helpers.REFERENCE_DEVICE, func(args ...any) {
			defer wg.Done()
			fn(suite)
		})
		wg.Wait()
	}
}

func TestMain(m *testing.M) {
	runtime.LoadBackendFromEnvOrDefault()
	{{if .SupportsNTT -}}
	devices, e := runtime.GetRegisteredDevices()
	if e != runtime.Success {
		panic("Failed to load registered devices")
	}
	for _, deviceType := range devices {
		device := runtime.CreateDevice(deviceType, 0)
		runtime.SetDevice(&device)

		// setup domain
		cfg := core.GetDefaultNTTInitDomainConfig()
		e = initDomain({{if ne .GnarkImport "" -}}largestTestSize, {{end -}}cfg)
		if e != runtime.Success {
			if e != runtime.ApiNotImplemented {
				fmt.Println("initDomain is not implemented for ", deviceType, " device type")
			} else {
				panic("initDomain failed")
			}
		}
	}{{end}}

	exitCode := m.Run()

	{{if .SupportsNTT -}}// release domain
	for _, deviceType := range devices {
		device := runtime.CreateDevice(deviceType, 0)
		runtime.SetDevice(&device)
		// release domain
		e = ntt.ReleaseDomain()
		if e != runtime.Success {
			if e != runtime.ApiNotImplemented {
				fmt.Println("ReleaseDomain is not implemented for ", deviceType, " device type")
			} else {
				panic("ReleaseDomain failed")
			}
		}
	}{{end}}

	os.Exit(exitCode)
}
