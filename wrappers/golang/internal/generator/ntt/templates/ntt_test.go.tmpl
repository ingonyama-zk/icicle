package tests

import (
	{{if ne .GnarkImport "" -}}
	"reflect"
	{{end -}}
	"testing"

	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/core"
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/runtime"
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/test_helpers"
	{{.Field}} "github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}"
	ntt "github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}/ntt"
	{{if ne .GnarkImport "" -}}
	"github.com/consensys/gnark-crypto/ecc/{{.GnarkImport}}/fr"
	"github.com/consensys/gnark-crypto/ecc/{{.GnarkImport}}/fr/fft"
	{{end -}}
	"github.com/stretchr/testify/suite"
)

{{if ne .GnarkImport "" -}}
func testAgainstGnarkCryptoNtt(suite suite.Suite, size int, scalars core.HostSlice[{{.Field}}.{{.FieldPrefix}}Field], output core.HostSlice[{{.Field}}.{{.FieldPrefix}}Field], order core.Ordering, direction core.NTTDir) {
	scalarsFr := make([]fr.Element, size)
	for i, v := range scalars {
		slice64, _ := fr.LittleEndian.Element((*[fr.Bytes]byte)(v.ToBytesLittleEndian()))
		scalarsFr[i] = slice64
	}
	outputAsFr := make([]fr.Element, size)
	for i, v := range output {
		slice64, _ := fr.LittleEndian.Element((*[fr.Bytes]byte)(v.ToBytesLittleEndian()))
		outputAsFr[i] = slice64
	}

	testAgainstGnarkCryptoNttGnarkTypes(suite, size, scalarsFr, outputAsFr, order, direction)
}

func testAgainstGnarkCryptoNttGnarkTypes(suite suite.Suite, size int, scalarsFr core.HostSlice[fr.Element], outputAsFr core.HostSlice[fr.Element], order core.Ordering, direction core.NTTDir) {
	domainWithPrecompute := fft.NewDomain(uint64(size))
	// DIT + BitReverse == Ordering.kRR
	// DIT == Ordering.kRN
	// DIF + BitReverse == Ordering.kNN
	// DIF == Ordering.kNR
	var decimation fft.Decimation
	if order == core.KRN || order == core.KRR {
		decimation = fft.DIT
	} else {
		decimation = fft.DIF
	}

	if direction == core.KForward {
		domainWithPrecompute.FFT(scalarsFr, decimation)
	} else {
		domainWithPrecompute.FFTInverse(scalarsFr, decimation)
	}

	if order == core.KNN || order == core.KRR {
		fft.BitReverse(scalarsFr)
	}
	suite.Equal(scalarsFr, outputAsFr)
}
{{end -}}

func testNTTGetDefaultConfig(suite suite.Suite) {
	actual := ntt.GetDefaultNttConfig()
	expected := test_helpers.GenerateLimbOne(int({{.Field}}.{{toConst .FieldPrefix}}LIMBS))
	suite.Equal(expected, actual.CosetGen[:])

	cosetGenField := {{.Field}}.{{.FieldPrefix}}Field{}
	cosetGenField.One()
	suite.ElementsMatch(cosetGenField.GetLimbs(), actual.CosetGen)
}

func testNtt(suite suite.Suite) {
	cfg := ntt.GetDefaultNttConfig()
	scalars := {{.Field}}.GenerateScalars(1 << largestTestSize)

	for _, size := range []int{4, largestTestSize} {
		for _, v := range [4]core.Ordering{core.KNN, core.KNR, core.KRN, core.KRR} {
			runtime.SetDevice(&DEVICE)

			testSize := 1 << size

			scalarsCopy := core.HostSliceFromElements[{{.Field}}.{{.FieldPrefix}}Field](scalars[:testSize])
			cfg.Ordering = v

			// run ntt
			output := make(core.HostSlice[{{.Field}}.{{.FieldPrefix}}Field], testSize)
			ntt.Ntt(scalarsCopy, core.KForward, &cfg, output)

			{{if ne .GnarkImport "" -}}
			// Compare with gnark-crypto
			testAgainstGnarkCryptoNtt(suite, testSize, scalarsCopy, output, v, core.KForward)
			{{end -}}
		}
	}
}
{{if ne .GnarkImport "" -}}
func testNttFrElement(suite suite.Suite) {
	cfg := ntt.GetDefaultNttConfig()
	scalars := make([]fr.Element, 4)
	var x fr.Element
	for i := 0; i < 4; i++ {
		x.SetRandom()
		scalars[i] = x
	}

	for _, size := range []int{4} {
		for _, v := range [1]core.Ordering{core.KNN} {
			runtime.SetDevice(&DEVICE)

			testSize := size

			scalarsCopy := (core.HostSlice[fr.Element])(scalars[:testSize])
			cfg.Ordering = v

			// run ntt
			output := make(core.HostSlice[fr.Element], testSize)
			ntt.Ntt(scalarsCopy, core.KForward, &cfg, output)

			// Compare with gnark-crypto
			testAgainstGnarkCryptoNttGnarkTypes(suite, testSize, scalarsCopy, output, v, core.KForward)
		}
	}
}
{{end}}
func testNttDeviceAsync(suite suite.Suite) {
	cfg := ntt.GetDefaultNttConfig()
	scalars := {{.Field}}.GenerateScalars(1 << largestTestSize)

	for _, size := range []int{1, 10, largestTestSize} {
		for _, direction := range []core.NTTDir{core.KForward, core.KInverse} {
			for _, v := range [4]core.Ordering{core.KNN, core.KNR, core.KRN, core.KRR} {
				runtime.SetDevice(&DEVICE)

				testSize := 1 << size
				scalarsCopy := core.HostSliceFromElements[{{.Field}}.{{.FieldPrefix}}Field](scalars[:testSize])

				stream, _ := runtime.CreateStream()

				cfg.Ordering = v
				cfg.IsAsync = true
				cfg.StreamHandle = stream

				var deviceInput core.DeviceSlice
				scalarsCopy.CopyToDeviceAsync(&deviceInput, stream, true)
				var deviceOutput core.DeviceSlice
				deviceOutput.MallocAsync(scalarsCopy.SizeOfElement(), testSize, stream)

				// run ntt
				ntt.Ntt(deviceInput, direction, &cfg, deviceOutput)
				output := make(core.HostSlice[{{.Field}}.{{.FieldPrefix}}Field], testSize)
				output.CopyFromDeviceAsync(&deviceOutput, stream)

				runtime.SynchronizeStream(stream)
				runtime.DestroyStream(stream)
				{{if ne .GnarkImport "" -}}
				// Compare with gnark-crypto
				testAgainstGnarkCryptoNtt(suite, testSize, scalarsCopy, output, v, direction)
				{{end -}}
			}
		}
	}
}

func testNttBatch(suite suite.Suite) {
	cfg := ntt.GetDefaultNttConfig()
	largestTestSize := 10
	largestBatchSize := 20
	scalars := {{.Field}}.GenerateScalars(1 << largestTestSize * largestBatchSize)

	for _, size := range []int{4, largestTestSize} {
		for _, batchSize := range []int{2, 16, largestBatchSize} {
			runtime.SetDevice(&DEVICE)

			testSize := 1 << size
			totalSize := testSize * batchSize

			scalarsCopy := core.HostSliceFromElements[{{.Field}}.{{.FieldPrefix}}Field](scalars[:totalSize])

			cfg.Ordering = core.KNN
			cfg.BatchSize = int32(batchSize)
			// run ntt
			output := make(core.HostSlice[{{.Field}}.{{.FieldPrefix}}Field], totalSize)
			ntt.Ntt(scalarsCopy, core.KForward, &cfg, output)

			{{if ne .GnarkImport "" -}}
			// Compare with gnark-crypto
			domainWithPrecompute := fft.NewDomain(uint64(testSize))
			outputAsFr := make([]fr.Element, totalSize)
			for i, v := range output {
				slice64, _ := fr.LittleEndian.Element((*[fr.Bytes]byte)(v.ToBytesLittleEndian()))
				outputAsFr[i] = slice64
			}

			for i := 0; i < batchSize; i++ {
				scalarsFr := make([]fr.Element, testSize)
				for i, v := range scalarsCopy[i*testSize : (i+1)*testSize] {
					slice64, _ := fr.LittleEndian.Element((*[fr.Bytes]byte)(v.ToBytesLittleEndian()))
					scalarsFr[i] = slice64
				}

				domainWithPrecompute.FFT(scalarsFr, fft.DIF)
				fft.BitReverse(scalarsFr)
				if !suite.True(reflect.DeepEqual(scalarsFr, outputAsFr[i*testSize:(i+1)*testSize])) {
					suite.T().FailNow()
				}
			}
			{{end -}}
		}
	}
}

type NTTTestSuite struct {
	suite.Suite
}

func (s *NTTTestSuite) TestNTT() {
	s.Run("TestNTTGetDefaultConfig", testWrapper(s.Suite, testNTTGetDefaultConfig))
	s.Run("TestNTT", testWrapper(s.Suite, testNtt))
	{{if ne .GnarkImport "" -}}
	s.Run("TestNTTFrElement", testWrapper(s.Suite, testNttFrElement))
	{{end -}}
	s.Run("TestNttDeviceAsync", testWrapper(s.Suite, testNttDeviceAsync))
	s.Run("TestNttBatch", testWrapper(s.Suite, testNttBatch))
}

func TestSuiteNTT(t *testing.T) {
	suite.Run(t, new(NTTTestSuite))
}
