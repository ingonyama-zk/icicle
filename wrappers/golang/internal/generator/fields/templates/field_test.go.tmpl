package tests

import (
	"testing"
  	{{if .IsScalar}}
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/core"{{end}}
	{{if ne .FieldPrefix "G2"}}{{.Field}}{{end}} "github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}{{if eq .FieldPrefix "G2"}}/g2{{end}}"
  	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/test_helpers"
	"github.com/stretchr/testify/suite"
)

const (
	{{toConst .FieldPrefix}}LIMBS = {{if eq .FieldPrefix "G2"}}g2{{else}}{{.Field}}{{end}}.{{toConst .FieldPrefix}}LIMBS
)

func test{{.FieldPrefix}}FieldFromLimbs(suite suite.Suite) {
	emptyField := {{if eq .FieldPrefix "G2"}}g2{{else}}{{.Field}}{{end}}.{{.FieldPrefix}}Field{}
	randLimbs := test_helpers.GenerateRandomLimb(int({{toConst .FieldPrefix}}LIMBS))
	emptyField.FromLimbs(randLimbs[:])
	suite.ElementsMatch(randLimbs, emptyField.GetLimbs(), "Limbs do not match; there was an issue with setting the {{.FieldPrefix}}Field's limbs")
	randLimbs[0] = 100
	suite.NotEqual(randLimbs, emptyField.GetLimbs())
}

func test{{.FieldPrefix}}FieldGetLimbs(suite suite.Suite) {
	emptyField := {{if eq .FieldPrefix "G2"}}g2{{else}}{{.Field}}{{end}}.{{.FieldPrefix}}Field{}
	randLimbs := test_helpers.GenerateRandomLimb(int({{toConst .FieldPrefix}}LIMBS))
	emptyField.FromLimbs(randLimbs[:])

	suite.ElementsMatch(randLimbs, emptyField.GetLimbs(), "Limbs do not match; there was an issue with setting the {{.FieldPrefix}}Field's limbs")
}

func test{{.FieldPrefix}}FieldOne(suite suite.Suite) {
	var emptyField {{if eq .FieldPrefix "G2"}}g2{{else}}{{.Field}}{{end}}.{{.FieldPrefix}}Field
	emptyField.One()
	limbOne := test_helpers.GenerateLimbOne(int({{toConst .FieldPrefix}}LIMBS))
	suite.ElementsMatch(emptyField.GetLimbs(), limbOne, "Empty field to field one did not work")

	randLimbs := test_helpers.GenerateRandomLimb(int({{toConst .FieldPrefix}}LIMBS))
	emptyField.FromLimbs(randLimbs[:])

	emptyField.One()
	suite.ElementsMatch(emptyField.GetLimbs(), limbOne, "{{.FieldPrefix}}Field with limbs to field one did not work")
}

func test{{.FieldPrefix}}FieldZero(suite suite.Suite) {
	var emptyField {{if eq .FieldPrefix "G2"}}g2{{else}}{{.Field}}{{end}}.{{.FieldPrefix}}Field
	emptyField.Zero()
	limbsZero := make([]uint32, {{toConst .FieldPrefix}}LIMBS)
	suite.ElementsMatch(emptyField.GetLimbs(), limbsZero, "Empty field to field zero failed")

	randLimbs := test_helpers.GenerateRandomLimb(int({{toConst .FieldPrefix}}LIMBS))
	emptyField.FromLimbs(randLimbs[:])

	emptyField.Zero()
	suite.ElementsMatch(emptyField.GetLimbs(), limbsZero, "{{.FieldPrefix}}Field with limbs to field zero failed")
}

func test{{.FieldPrefix}}FieldSize(suite suite.Suite) {
	var emptyField {{if eq .FieldPrefix "G2"}}g2{{else}}{{.Field}}{{end}}.{{.FieldPrefix}}Field
	randLimbs := test_helpers.GenerateRandomLimb(int({{toConst .FieldPrefix}}LIMBS))
	emptyField.FromLimbs(randLimbs[:])

	suite.Equal(len(randLimbs)*4, emptyField.Size(), "Size returned an incorrect value of bytes")
}

func test{{.FieldPrefix}}FieldAsPointer(suite suite.Suite) {
	var emptyField {{if eq .FieldPrefix "G2"}}g2{{else}}{{.Field}}{{end}}.{{.FieldPrefix}}Field
	randLimbs := test_helpers.GenerateRandomLimb(int({{toConst .FieldPrefix}}LIMBS))
	emptyField.FromLimbs(randLimbs[:])

	suite.Equal(randLimbs[0], *emptyField.AsPointer(), "AsPointer returned pointer to incorrect value")
}

func test{{.FieldPrefix}}FieldFromBytes(suite suite.Suite) {
	var emptyField {{if eq .FieldPrefix "G2"}}g2{{else}}{{.Field}}{{end}}.{{.FieldPrefix}}Field
	bytes, expected := test_helpers.GenerateBytesArray(int({{toConst .FieldPrefix}}LIMBS))

	emptyField.FromBytesLittleEndian(bytes)

	suite.ElementsMatch(emptyField.GetLimbs(), expected, "FromBytes returned incorrect values")
}

func test{{.FieldPrefix}}FieldToBytes(suite suite.Suite) {
	var emptyField {{if eq .FieldPrefix "G2"}}g2{{else}}{{.Field}}{{end}}.{{.FieldPrefix}}Field
	expected, limbs := test_helpers.GenerateBytesArray(int({{toConst .FieldPrefix}}LIMBS))
	emptyField.FromLimbs(limbs)

	suite.ElementsMatch(emptyField.ToBytesLittleEndian(), expected, "ToBytes returned incorrect values")
}
{{if .IsScalar}}
func test{{capitalize .Field}}GenerateScalars(suite suite.Suite) {
	const numScalars = 8
	scalars := {{.Field}}.GenerateScalars(numScalars)

	suite.Implements((*core.HostOrDeviceSlice)(nil), &scalars)

	suite.Equal(numScalars, scalars.Len())
	zeroScalar := {{.Field}}.{{.FieldPrefix}}Field{}
	suite.NotContains(scalars, zeroScalar)
}

func test{{capitalize .Field}}MongtomeryConversion(suite suite.Suite) {
	size := 1 << 20
	scalars := {{.Field}}.GenerateScalars(size)

	var deviceScalars core.DeviceSlice
	scalars.CopyToDevice(&deviceScalars, true)

	{{.Field}}.ToMontgomery(deviceScalars)

	scalarsMontHost := make(core.HostSlice[{{.Field}}.{{.FieldPrefix}}Field], size)

	scalarsMontHost.CopyFromDevice(&deviceScalars)
	suite.NotEqual(scalars, scalarsMontHost)

	{{.Field}}.FromMontgomery(deviceScalars)

	scalarsMontHost.CopyFromDevice(&deviceScalars)
	suite.Equal(scalars, scalarsMontHost)
}{{end}}


type {{.FieldPrefix}}FieldTestSuite struct {
	suite.Suite
}

func (s *{{.FieldPrefix}}FieldTestSuite) Test{{.FieldPrefix}}Field() {
	s.Run("Test{{.FieldPrefix}}FieldFromLimbs", testWrapper(s.Suite, test{{.FieldPrefix}}FieldFromLimbs))
	s.Run("Test{{.FieldPrefix}}FieldGetLimbs", testWrapper(s.Suite, test{{.FieldPrefix}}FieldGetLimbs))
	s.Run("Test{{.FieldPrefix}}FieldOne", testWrapper(s.Suite, test{{.FieldPrefix}}FieldOne))
	s.Run("Test{{.FieldPrefix}}FieldZero", testWrapper(s.Suite, test{{.FieldPrefix}}FieldZero))
	s.Run("Test{{.FieldPrefix}}FieldSize", testWrapper(s.Suite, test{{.FieldPrefix}}FieldSize))
	s.Run("Test{{.FieldPrefix}}FieldAsPointer", testWrapper(s.Suite, test{{.FieldPrefix}}FieldAsPointer))
	s.Run("Test{{.FieldPrefix}}FieldFromBytes", testWrapper(s.Suite, test{{.FieldPrefix}}FieldFromBytes))
	s.Run("Test{{.FieldPrefix}}FieldToBytes", testWrapper(s.Suite, test{{.FieldPrefix}}FieldToBytes))
	{{if .IsScalar -}}
	s.Run("Test{{capitalize .Field}}GenerateScalars", testWrapper(s.Suite, test{{capitalize .Field}}GenerateScalars))
	s.Run("Test{{capitalize .Field}}MongtomeryConversion", testWrapper(s.Suite, test{{capitalize .Field}}MongtomeryConversion))
	{{- end}}
}

func TestSuite{{.FieldPrefix}}Field(t *testing.T) {
	suite.Run(t, new({{.FieldPrefix}}FieldTestSuite))
}
