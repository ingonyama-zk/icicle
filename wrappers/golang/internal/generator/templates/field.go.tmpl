{{if .IsG2 -}}
package g2
{{- else -}}
package {{.PackageName}}
{{- end}}
{{if .IsScalar}}
{{- template "scalar_field_c_imports" . -}}
{{end}}
import (
	"encoding/binary"
	"fmt"
	{{- if .IsScalar}}
	{{- template "scalar_field_go_imports" -}}
	{{end}}
)

const (
	{{if .IsScalar}}SCALAR{{else}}{{if .IsG2}}G2_{{end}}BASE{{end}}_LIMBS int = {{if .IsScalar}}{{.ScalarLimbsNum}}{{else}}{{if .IsG2}}{{.G2BaseLimbsNum}}{{else}}{{.BaseLimbsNum}}{{end}}{{end}}
)

type {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field struct {
	limbs [{{- if .IsScalar}}SCALAR{{else}}{{if .IsG2}}G2_{{end}}BASE{{end}}_LIMBS]uint64
}

func (f {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field) Len() int {
	return int({{- if .IsScalar}}SCALAR{{else}}{{if .IsG2}}G2_{{end}}BASE{{end}}_LIMBS)
}

func (f {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field) Size() int {
	return int({{- if .IsScalar}}SCALAR{{else}}{{if .IsG2}}G2_{{end}}BASE{{end}}_LIMBS * 8)
}

func (f {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field) GetLimbs() []uint64 {
	return f.limbs[:]
}

func (f {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field) AsPointer() *uint64 {
	return &f.limbs[0]
}

func (f *{{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field) FromLimbs(limbs []uint64) {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field {
	if len(limbs) != f.Len() {
		panic("Called FromLimbs with limbs of different length than field")
	}
	for i := range f.limbs {
		f.limbs[i] = limbs[i]
	}

	return *f
}

func (f *{{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field) Zero() {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field {
	for i := range f.limbs {
		f.limbs[i] = 0
	}

	return *f
}

func (f *{{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field) One() {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field {
	for i := range f.limbs {
		f.limbs[i] = 0
	}
	f.limbs[0] = 1

	return *f
}

func (f *{{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field) FromBytesLittleEndian(bytes []byte) {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field {
	if len(bytes)/8 != f.Len() {
		panic(fmt.Sprintf("Called FromBytesLittleEndian with incorrect bytes length; expected %d - got %d", f.Len()*8, len(bytes)))
	}

	for i := range f.limbs {
		f.limbs[i] = binary.LittleEndian.Uint64(bytes[i*8 : i*8+8])
	}

	return *f
}

func (f {{if .IsMock}}Mock{{else}}{{if .IsG2}}G2{{end}}{{- if .IsScalar}}Scalar{{else}}Base{{end}}{{end}}Field) ToBytesLittleEndian() []byte {
	bytes := make([]byte, f.Len()*8)
	for i, v := range f.limbs {
		binary.LittleEndian.PutUint64(bytes[i*8:], v)
	}

	return bytes
}
{{- if .IsScalar}}
{{template "scalar_field_funcs" . }}{{end}}
