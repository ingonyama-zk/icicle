package tests

import (
	"testing"

	{{if ne .CurvePrefix "G2"}}{{.Curve}}{{end}} "github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}"
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/test_helpers"
	"github.com/stretchr/testify/suite"
)

func test{{.CurvePrefix}}AffineZero(suite suite.Suite) {
	var fieldZero = {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}BaseField{}

	var affineZero {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Affine
	suite.Equal(affineZero.X, fieldZero)
	suite.Equal(affineZero.Y, fieldZero)

	x := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	y := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	var affine {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Affine
	affine.FromLimbs(x, y)

	affine.Zero()
	suite.Equal(affine.X, fieldZero)
	suite.Equal(affine.Y, fieldZero)
}

func test{{.CurvePrefix}}AffineFromLimbs(suite suite.Suite) {
	randLimbs := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	randLimbs2 := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))

	var affine {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Affine
	affine.FromLimbs(randLimbs, randLimbs2)

	suite.ElementsMatch(randLimbs, affine.X.GetLimbs())
	suite.ElementsMatch(randLimbs2, affine.Y.GetLimbs())
}

func test{{.CurvePrefix}}AffineToProjective(suite suite.Suite) {
	randLimbs := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	randLimbs2 := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	var fieldOne {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}BaseField
	fieldOne.One()

	var expected {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Projective
	expected.FromLimbs(randLimbs, randLimbs2, fieldOne.GetLimbs()[:])

	var affine {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Affine
	affine.FromLimbs(randLimbs, randLimbs2)

	projectivePoint := affine.ToProjective()
	suite.Equal(expected, projectivePoint)
}

func test{{.CurvePrefix}}ProjectiveZero(suite suite.Suite) {
	var projectiveZero {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Projective
	projectiveZero.Zero()
	var fieldZero = {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}BaseField{}
	var fieldOne {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}BaseField
	fieldOne.One()

	suite.Equal(projectiveZero.X, fieldZero)
	suite.Equal(projectiveZero.Y, fieldOne)
	suite.Equal(projectiveZero.Z, fieldZero)

	randLimbs := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	var projective {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Projective
	projective.FromLimbs(randLimbs, randLimbs, randLimbs)

	projective.Zero()
	suite.Equal(projective.X, fieldZero)
	suite.Equal(projective.Y, fieldOne)
	suite.Equal(projective.Z, fieldZero)
}

func test{{.CurvePrefix}}ProjectiveFromLimbs(suite suite.Suite) {
	randLimbs := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	randLimbs2 := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	randLimbs3 := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))

	var projective {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Projective
	projective.FromLimbs(randLimbs, randLimbs2, randLimbs3)

	suite.ElementsMatch(randLimbs, projective.X.GetLimbs())
	suite.ElementsMatch(randLimbs2, projective.Y.GetLimbs())
	suite.ElementsMatch(randLimbs3, projective.Z.GetLimbs())
}

func test{{.CurvePrefix}}ProjectiveFromAffine(suite suite.Suite) {
	randLimbs := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	randLimbs2 := test_helpers.GenerateRandomLimb(int({{.CurvePrefix}}BASE_LIMBS))
	var fieldOne {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}BaseField
	fieldOne.One()

	var expected {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Projective
	expected.FromLimbs(randLimbs, randLimbs2, fieldOne.GetLimbs()[:])

	var affine {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Affine
	affine.FromLimbs(randLimbs, randLimbs2)

	var projectivePoint {{if eq .CurvePrefix "G2"}}g2{{else}}{{.Curve}}{{end}}.{{.CurvePrefix}}Projective
	projectivePoint.FromAffine(affine)
	suite.Equal(expected, projectivePoint)
}

type {{.CurvePrefix}}CurveTestSuite struct {
	suite.Suite
}

func (s *{{.CurvePrefix}}CurveTestSuite) Test{{.CurvePrefix}}Curve() {
	s.Run("Test{{.CurvePrefix}}AffineZero", testWrapper(s.Suite, test{{.CurvePrefix}}AffineZero))
	s.Run("Test{{.CurvePrefix}}AffineFromLimbs", testWrapper(s.Suite, test{{.CurvePrefix}}AffineFromLimbs))
	s.Run("Test{{.CurvePrefix}}AffineToProjective", testWrapper(s.Suite, test{{.CurvePrefix}}AffineToProjective))
	s.Run("Test{{.CurvePrefix}}ProjectiveZero", testWrapper(s.Suite, test{{.CurvePrefix}}ProjectiveZero))
	s.Run("Test{{.CurvePrefix}}ProjectiveFromLimbs", testWrapper(s.Suite, test{{.CurvePrefix}}ProjectiveFromLimbs))
	s.Run("Test{{.CurvePrefix}}ProjectiveFromAffine", testWrapper(s.Suite, test{{.CurvePrefix}}ProjectiveFromAffine))
}

func TestSuite{{.CurvePrefix}}Curve(t *testing.T) {
	suite.Run(t, new({{.CurvePrefix}}CurveTestSuite))
}
