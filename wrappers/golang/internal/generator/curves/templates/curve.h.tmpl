#include <cuda_runtime.h>
#include <stdbool.h>

#ifndef _{{toUpper .Curve}}_{{.CurvePrefix}}CURVE_H
#define _{{toUpper .Curve}}_{{.CurvePrefix}}CURVE_H

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {{toCName .CurvePrefix}}projective_t {{toCName .CurvePrefix}}projective_t;
typedef struct {{toCName .CurvePrefix}}affine_t {{toCName .CurvePrefix}}affine_t;
typedef struct DeviceContext DeviceContext;

bool {{.Curve}}{{.CurvePrefix}}Eq({{toCName .CurvePrefix}}projective_t* point1, {{toCName .CurvePrefix}}projective_t* point2);
void {{.Curve}}{{.CurvePrefix}}ToAffine({{toCName .CurvePrefix}}projective_t* point, {{toCName .CurvePrefix}}affine_t* point_out);
void {{.Curve}}{{.CurvePrefix}}GenerateProjectivePoints({{toCName .CurvePrefix}}projective_t* points, int size);
void {{.Curve}}{{.CurvePrefix}}GenerateAffinePoints({{toCName .CurvePrefix}}affine_t* points, int size);
cudaError_t {{.Curve}}{{.CurvePrefix}}AffineConvertMontgomery({{toCName .CurvePrefix}}affine_t* points, size_t n, bool is_into, DeviceContext* ctx);
cudaError_t {{.Curve}}{{.CurvePrefix}}ProjectiveConvertMontgomery({{toCName .CurvePrefix}}projective_t* points, size_t n, bool is_into, DeviceContext* ctx);

#ifdef __cplusplus
}
#endif

#endif
