// Copyright 2023 Ingonyama
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by Ingonyama DO NOT EDIT

package bn254

// #cgo CFLAGS: -I./include/
// #cgo CFLAGS: -I/usr/local/cuda/include
// #cgo LDFLAGS: -L${SRCDIR}/../../../../icicle/build -lingo_bn254
// #include "ve_mod_mult.h"
import "C"
// import (
// 	"fmt"
// 	"unsafe"
// 	cuda "local/hello/icicle/wrappers/golang/cuda_runtime"
// )

// func VecScalarMulMod(scalarVec1, scalarVec2 unsafe.Pointer, size int) int {
// 	scalarVec1C := (*C.BN254_scalar_t)(scalarVec1)
// 	scalarVec2C := (*C.BN254_scalar_t)(scalarVec2)
// 	sizeC := C.size_t(size)

// 	ret := C.bn254MulCuda(scalarVec1C, scalarVec2C, sizeC, 0)

// 	if ret != 0 {
// 		fmt.Print("error multiplying scalar vectors")
// 		return -1
// 	}

// 	return 0
// }

// func VecScalarAdd(in1_d, in2_d, out_d unsafe.Pointer, ctx C.DeviceContext, size int) int {
// 	in1_dC := (*C.BN254_scalar_t)(in1_d)
// 	in2_dC := (*C.BN254_scalar_t)(in2_d)
// 	sizeC := C.int(size)
// 	onDeviceC := C.bool(true)
// 	out_dC := (*C.BN254_scalar_t)(out_d)

// 	ret := C.bn254AddCuda(in1_dC, in2_dC, sizeC, onDeviceC, ctx, out_dC)

// 	if ret != 0 {
// 		fmt.Print("error adding scalar vectors")
// 		return -1
// 	}

// 	return 0
// }

// func VecScalarSub(in1_d, in2_d unsafe.Pointer, size int) int {
// 	in1_dC := (*C.BN254_scalar_t)(in1_d)
// 	in2_dC := (*C.BN254_scalar_t)(in2_d)
// 	sizeC := C.size_t(size)

// 	ret := C.bn254SubCuda(in1_dC, in1_dC, in2_dC, sizeC, 0)

// 	if ret != 0 {
// 		fmt.Print("error subtracting scalar vectors")
// 		return -1
// 	}

// 	return 0
// }
