name: C++/CUDA/Go/RUST

on:
  pull_request:
    branches:
      - main
      - ci/separate-testing-by-feature

concurrency:
  group:  ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  spelling-checker:
    name: Check Spelling
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: codespell-project/actions-codespell@fad9339798e1ee3fe979ae0a022c931786a408b8
        with:
          # https://github.com/codespell-project/actions-codespell?tab=readme-ov-file#parameter-skip
          skip: ./**/target,./**/build,./docs/*.js,./docs/*.json,./*.svg
          # https://github.com/codespell-project/actions-codespell?tab=readme-ov-file#parameter-ignore_words_file
          ignore_words_file: .codespellignore

  check-changed-files:
    uses: ./.github/workflows/check-changed-files.yml

  check-format:
    name: Check Code Format
    runs-on: [self-hosted, Linux, X64, formatter]
    needs: check-changed-files
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - name: Setup go
      if: needs.check-changed-files.outputs.golang == 'true'
      uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b
      with:
        go-version: '1.22.0'
        cache: false
    - name: Check clang-format
      if: needs.check-changed-files.outputs.cpp == 'true'
      run: |
        clang-format --version  
        ./scripts/format_all.sh . --check --exclude "build|wrappers"
    - name: Check gofmt
      if: needs.check-changed-files.outputs.golang == 'true'
      run: if [[ $(go list ./... | xargs go fmt) ]]; then echo "Please run go fmt"; exit 1; fi
    - name: Check rustfmt
      if: needs.check-changed-files.outputs.rust == 'true'
      working-directory: ./wrappers/rust
      run: cargo fmt --all -- --check

  extract-cuda-backend-branch:
    uses: ./.github/workflows/extract-backend.yml
    with:
      pr-number: ${{ github.event.pull_request.number }}
      backend-type: cuda

  extract-metal-backend-branch:
    uses: ./.github/workflows/extract-backend.yml
    with:
      pr-number: ${{ github.event.pull_request.number }}
      backend-type: metal
  
  test-curve:
    name: Test Curve ${{ matrix.curve.name }} on ${{ matrix.os }} with ${{ matrix.backend }}
    runs-on: ${{ matrix.runner }}
    needs: [check-changed-files, check-format, extract-cuda-backend-branch, extract-metal-backend-branch]
    continue-on-error: ${{ matrix.initial-support }}
    strategy:
      matrix:
        backend: [cuda, metal]
        include:
          - backend: cuda
            backend_upper: CUDA
            secret_key: CUDA_PULL_KEY
            os: Linux
            runner: [self-hosted, Linux, X64, icicle]
            skip-rust-all-curves: ""
            skip-cpp-all-curves: ""
            skip-golang-all-curves: "false"
            initial-support: false
          - backend: metal
            backend_upper: METAL
            secret_key: METAL_PULL_KEY
            os: macOS
            runner: [self-hosted, macOS, ARM64, icicle, metal]
            skip-rust-all-curves: --skip montgomery --skip ntt --skip poseidon --skip ecntt --skip sumcheck --skip program --skip msm_batch_not_shared --skip msm_skewed_distributions --skip vec_ops_scalars_inv --skip pairing --skip fri
            skip-cpp-all-curves: .*G2.*|.*ecntt.*|.*ProgramExecutorVecOp.*|.*Sumcheck.*|.*Fri.*|FieldTestBase.polynomialDivision|.*MerkleTree.*|.*poseidon.*|HashApiTest.KeccakLarge
            skip-golang-all-curves: "true"
            initial-support: true
        curve:
          - name: bn254
            rust-supported-features: ["msm", "ntt", "ecntt", "fri", "sumcheck", "pairing", "poseidon", "poseidon2"]
            metal-skip-cpp-curve-specific: ""
            metal-skip-rust-curve-specific: ""
            metal-skip-golang-curve-specific: ""
          - name: bls12_381
            rust-supported-features: ["msm", "ntt", "ecntt", "fri", "sumcheck", "pairing", "poseidon", "poseidon2"] 
            # metal-cpp-flaky-tests: "ModArithTest.ntt|PolynomialTest.multiplication|PolynomialTest.divideByVanishingPolynomial|PolynomialTest.QAP|FieldTest.vectorDivision|FieldTestBase.polynomialDivision"
            metal-skip-cpp-curve-specific: ""
            metal-skip-rust-curve-specific: ""
            metal-skip-golang-curve-specific: ""
          - name: bls12_377
            rust-supported-features: ["msm", "ntt", "ecntt", "fri", "sumcheck", "pairing", "poseidon", "poseidon2"]
            metal-skip-cpp-curve-specific: ""
            metal-skip-rust-curve-specific: ""
            metal-skip-golang-curve-specific: ""
          - name: bw6_761
            rust-supported-features: ["msm", "ntt", "fri", "poseidon", "poseidon2"]
            metal-skip-cpp-curve-specific: ""
            metal-skip-rust-curve-specific: ""
            metal-skip-golang-curve-specific: ""
          - name: grumpkin
            rust-supported-features: ["msm", "sumcheck", "poseidon", "poseidon2"]
            metal-skip-cpp-curve-specific: ""
            metal-skip-rust-curve-specific: ""
            metal-skip-golang-curve-specific: ""

    steps:
    - name: Set Backend Secret Key
      id: pull_key
      run: |
          {
            echo "PULL_KEY<<EOF"
            echo "${{ secrets[matrix.secret_key] }}"
            echo "EOF"
          } >> $GITHUB_OUTPUT
    - name: Set Backend Branch Name
      run: |
        if [[ "${{ matrix.backend }}" == "cuda" ]]; then
        echo 'cuda backend branch: ${{ needs.extract-cuda-backend-branch.outputs.backend-branch }}'
          echo "BACKEND_BRANCH=${{ needs.extract-cuda-backend-branch.outputs.backend-branch }}" >> $GITHUB_ENV
        elif [[ "${{ matrix.backend }}" == "metal" ]]; then
          echo "metal backend branch: ${{ needs.extract-metal-backend-branch.outputs.backend-branch }}"
          echo "BACKEND_BRANCH=${{ needs.extract-metal-backend-branch.outputs.backend-branch }}" >> $GITHUB_ENV
        fi
    - name: Checkout Repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - name: Checkout ${{ matrix.backend_upper }} Backend
      if: needs.check-changed-files.outputs.any == 'true'
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        repository: ingonyama-zk/icicle-${{ matrix.backend }}-backend
        path: ./icicle/backend/${{ matrix.backend }}
        ssh-key: ${{ steps.pull_key.outputs.PULL_KEY }}
        ref: ${{ env.BACKEND_BRANCH }}
    - name: Get ${{ matrix.backend_upper }} Backend Commit SHA
      if: needs.check-changed-files.outputs.any == 'true'
      working-directory: ./icicle/backend/${{ matrix.backend }}
      id: extract-backend-sha
      run: |
          BACKEND_SHA=$(git rev-parse HEAD)
          echo "Backend Commit SHA: $BACKEND_SHA"
          echo "extracted-backend-sha=$BACKEND_SHA" >> $GITHUB_OUTPUT
    - name: Set ${{ matrix.backend_upper }} backend flag
      if: needs.check-changed-files.outputs.any == 'true'
      id: curve-backend-flag
      run: |
        BACKEND_SHA=${{ steps.extract-backend-sha.outputs.extracted-backend-sha }}
        CURVE=${{ matrix.curve.name }}
        COMMIT_FILE="gh_commit_sha_${CURVE}_${BACKEND_SHA}"
        if [ "${{ env.BACKEND_BRANCH }}" == "main" ]; then
          INSTALL_PATH=${{ github.workspace }}/../../main_lib/curve/$CURVE
          echo "INSTALL_PATH=${{ github.workspace }}/../../main_lib/curve/$CURVE" >> $GITHUB_OUTPUT
          COMMIT_FILE_PATH=${INSTALL_PATH}/lib/${COMMIT_FILE}
          echo "COMMIT_FILE_PATH=${INSTALL_PATH}/lib/${COMMIT_FILE}" >> $GITHUB_OUTPUT

          if [ -f "$COMMIT_FILE_PATH" ]; then
            echo "${COMMIT_FILE} exists in ${INSTALL_PATH}/lib. Setting BACKEND_FLAG="
            echo "BACKEND_FLAG=" >> $GITHUB_OUTPUT
          else
            echo "${COMMIT_FILE} does not exist in ${INSTALL_PATH}/lib. Setting BACKEND_FLAG=-D${{ matrix.backend_upper }}_BACKEND=local"
            echo "BACKEND_FLAG=-D${{ matrix.backend_upper }}_BACKEND=local" >> $GITHUB_OUTPUT
            rm -rf ${INSTALL_PATH}
          fi
          echo "CMAKE_INSTALL_PREFIX=-DCMAKE_INSTALL_PREFIX=${INSTALL_PATH}" >> $GITHUB_OUTPUT
          echo "ICICLE_BACKEND_INSTALL_DIR=${INSTALL_PATH}/lib" >> $GITHUB_OUTPUT
        else
          INSTALL_PATH=${{ github.workspace }}/../../temp_lib/curve/$CURVE
          echo "INSTALL_PATH=${{ github.workspace }}/../../temp_lib/curve/$CURVE" >> $GITHUB_OUTPUT
          COMMIT_FILE_PATH=${INSTALL_PATH}/lib/${COMMIT_FILE}
          echo "COMMIT_FILE_PATH=${INSTALL_PATH}/lib/${COMMIT_FILE}" >> $GITHUB_OUTPUT
          if [ -f "$COMMIT_FILE_PATH" ]; then
            echo "${COMMIT_FILE} exists in ${INSTALL_PATH}/lib. Setting BACKEND_FLAG="
            echo "BACKEND_FLAG=" >> $GITHUB_OUTPUT
          else
            echo "${COMMIT_FILE} does not exist in ${INSTALL_PATH}/lib. Setting BACKEND_FLAG=-D${{ matrix.backend_upper }}_BACKEND=local"
            echo "BACKEND_FLAG=-D${{ matrix.backend_upper }}_BACKEND=local" >> $GITHUB_OUTPUT
            rm -rf ${INSTALL_PATH}
          fi
          echo "CMAKE_INSTALL_PREFIX=-DCMAKE_INSTALL_PREFIX=${INSTALL_PATH}" >> $GITHUB_OUTPUT
          echo "ICICLE_BACKEND_INSTALL_DIR=${INSTALL_PATH}/lib" >> $GITHUB_OUTPUT
        fi
    - name: Set feature flags
      id: feature_flags
      if: needs.check-changed-files.outputs.any == 'true'
      run: |
        FEATURE_FLAGS=""
        CPP_TEST_REGEX="(?i)CurveSanity|ModArith|Symbol|Program"
        RUST_TEST_FEATURES=""
        GO_TEST_BUILD_TAGS_TO_IGNORE=""
        
        # MSM module
        if [[ "${{ needs.check-changed-files.outputs.msm }}" == "true" || "${{ needs.check-changed-files.outputs.rust-msm }}" == "true" || "${{ needs.check-changed-files.outputs.go-msm }}" == "true" ]]; then
          FEATURE_FLAGS="$FEATURE_FLAGS -DMSM=ON -DG2=ON"
          CPP_TEST_REGEX="$CPP_TEST_REGEX|msm"
          RUST_TEST_FEATURES="$RUST_TEST_FEATURES,msm"
          GO_TEST_BUILD_TAGS_TO_IGNORE="$GO_TEST_BUILD_TAGS_TO_IGNORE msm"
        fi
        
        # NTT module (includes polynomials)
        if [[ "${{ needs.check-changed-files.outputs.ntt }}" == "true" || "${{ needs.check-changed-files.outputs.rust-ntt }}" == "true" || "${{ needs.check-changed-files.outputs.go-ntt }}" == "true" ]]; then
          FEATURE_FLAGS="$FEATURE_FLAGS -DNTT=ON"
          CPP_TEST_REGEX="$CPP_TEST_REGEX|ntt"
          RUST_TEST_FEATURES="$RUST_TEST_FEATURES,ntt"
          GO_TEST_BUILD_TAGS_TO_IGNORE="$GO_TEST_BUILD_TAGS_TO_IGNORE ntt"
        fi
        
        # ECNTT module
        if [[ "${{ needs.check-changed-files.outputs.ecntt }}" == "true" || "${{ needs.check-changed-files.outputs.rust-ecntt }}" == "true" || "${{ needs.check-changed-files.outputs.go-ecntt }}" == "true" ]]; then
          FEATURE_FLAGS="$FEATURE_FLAGS -DECNTT=ON -DNTT=ON"
          CPP_TEST_REGEX="$CPP_TEST_REGEX|ecntt"
          RUST_TEST_FEATURES="$RUST_TEST_FEATURES,ecntt"
          GO_TEST_BUILD_TAGS_TO_IGNORE="$GO_TEST_BUILD_TAGS_TO_IGNORE ecntt"
        fi

        # Pairing module
        if [[ "${{ needs.check-changed-files.outputs.pairing }}" == "true" || "${{ needs.check-changed-files.outputs.rust-pairing }}" == "true" || "${{ needs.check-changed-files.outputs.go-pairing }}" == "true" ]]; then
          # Pairing requires G2 point operations
          FEATURE_FLAGS="$FEATURE_FLAGS -DG2=ON"
          CPP_TEST_REGEX="$CPP_TEST_REGEX|pairing"
          RUST_TEST_FEATURES="$RUST_TEST_FEATURES,pairing"
          GO_TEST_BUILD_TAGS_TO_IGNORE="$GO_TEST_BUILD_TAGS_TO_IGNORE pairing"
        fi
        
        # FRI module
        if [[ "${{ needs.check-changed-files.outputs.fri }}" == "true" || "${{ needs.check-changed-files.outputs.rust-fri }}" == "true" || "${{ needs.check-changed-files.outputs.go-fri }}" == "true" ]]; then
          FEATURE_FLAGS="$FEATURE_FLAGS -DFRI=ON -DHASH=ON"
          CPP_TEST_REGEX="$CPP_TEST_REGEX|fri"
          RUST_TEST_FEATURES="$RUST_TEST_FEATURES,fri"
          GO_TEST_BUILD_TAGS_TO_IGNORE="$GO_TEST_BUILD_TAGS_TO_IGNORE fri"
        fi
        
        # Sumcheck module
        if [[ "${{ needs.check-changed-files.outputs.sumcheck }}" == "true" || "${{ needs.check-changed-files.outputs.rust-sumcheck }}" == "true" || "${{ needs.check-changed-files.outputs.go-sumcheck }}" == "true" ]]; then
          FEATURE_FLAGS="$FEATURE_FLAGS -DSUMCHECK=ON -DHASH=ON"
          CPP_TEST_REGEX="$CPP_TEST_REGEX|SumcheckTest"
          RUST_TEST_FEATURES="$RUST_TEST_FEATURES,sumcheck"
          GO_TEST_BUILD_TAGS_TO_IGNORE="$GO_TEST_BUILD_TAGS_TO_IGNORE sumcheck"
        fi

        # Poseidon module
        if [[ "${{ needs.check-changed-files.outputs.poseidon }}" == "true" || "${{ needs.check-changed-files.outputs.rust-poseidon }}" == "true" || "${{ needs.check-changed-files.outputs.go-poseidon }}" == "true" ]]; then
          FEATURE_FLAGS="$FEATURE_FLAGS -DPOSEIDON=ON -DHASH=ON"
          CPP_TEST_REGEX="$CPP_TEST_REGEX|poseidon"
          RUST_TEST_FEATURES="$RUST_TEST_FEATURES,poseidon"
          GO_TEST_BUILD_TAGS_TO_IGNORE="$GO_TEST_BUILD_TAGS_TO_IGNORE poseidon"
        fi

        # Poseidon2 module
        if [[ "${{ needs.check-changed-files.outputs.poseidon2 }}" == "true" || "${{ needs.check-changed-files.outputs.rust-poseidon2 }}" == "true" || "${{ needs.check-changed-files.outputs.go-poseidon2 }}" == "true" ]]; then
          FEATURE_FLAGS="$FEATURE_FLAGS -DPOSEIDON2=ON -DHASH=ON"
          CPP_TEST_REGEX="$CPP_TEST_REGEX|poseidon2"
          RUST_TEST_FEATURES="$RUST_TEST_FEATURES,poseidon2"
          GO_TEST_BUILD_TAGS_TO_IGNORE="$GO_TEST_BUILD_TAGS_TO_IGNORE poseidon2"
        fi

        echo "Feature flags: $FEATURE_FLAGS"
        echo "FEATURE_FLAGS=$FEATURE_FLAGS" >> $GITHUB_OUTPUT
        echo "CPP_TEST_REGEX=$CPP_TEST_REGEX" >> $GITHUB_OUTPUT
        echo "RUST_TEST_FEATURES=$RUST_TEST_FEATURES" >> $GITHUB_OUTPUT
        echo "GO_TEST_BUILD_TAGS=$GO_TEST_BUILD_TAGS" >> $GITHUB_OUTPUT
        
    - name: Build curve
      working-directory: ./icicle
      if: needs.check-changed-files.outputs.any == 'true'
      run: |
        mkdir -p build && rm -rf build/*
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DCURVE=${{ matrix.curve.name }} ${{ steps.curve-backend-flag.outputs.BACKEND_FLAG }} ${{ steps.curve-backend-flag.outputs.CMAKE_INSTALL_PREFIX }} ${{ steps.feature_flags.outputs.FEATURE_FLAGS }} -S . -B build
        cmake --build build --target install -j
        rm -rf ${{ steps.curve-backend-flag.outputs.INSTALL_PATH }}/lib/gh_commit_sha_${{ matrix.curve.name }}*
        touch ${{ steps.curve-backend-flag.outputs.COMMIT_FILE_PATH }}

    - name: Run C++ Curve Tests
      working-directory: ./icicle/build/tests
      if: needs.check-changed-files.outputs.cpp == 'true'
      run: |
        export ICICLE_BACKEND_INSTALL_DIR=${{ steps.curve-backend-flag.outputs.ICICLE_BACKEND_INSTALL_DIR }}
        # Base skip tests from matrix
        export SKIP_TESTS="${{ matrix.skip-cpp-all-curves }}"
        if [ "${{ matrix.backend }}" = "metal" ] && [ ! -z "${{ matrix.curve.metal-skip-cpp-curve-specific }}" ]; then
          export SKIP_TESTS="${{ matrix.skip-cpp-all-curves }}|${{ matrix.curve.metal-skip-cpp-curve-specific }}"
        fi
        echo "SKIP_TESTS: $SKIP_TESTS"
        
        ctest --output-on-failure -R ${{ steps.feature_flags.outputs.CPP_TEST_REGEX }} -E "$SKIP_TESTS"
        
    - name: Run RUST Curve Tests
      working-directory: ./wrappers/rust/icicle-curves
      if: needs.check-changed-files.outputs.rust == 'true'
      run: |
        CURVE=${{ matrix.curve.name }}
        CURVE_DIR=icicle-${CURVE//_/-}
        export ICICLE_BACKEND_INSTALL_DIR=${{ steps.curve-backend-flag.outputs.INSTALL_PATH }}
        cd ./$CURVE_DIR
        
        # Base skip tests from matrix
        export SKIP_RUST_TESTS="${{ matrix.skip-rust-all-curves }}"
        if [ "${{ matrix.backend }}" = "metal" ] && [ ! -z "${{ matrix.curve.metal-skip-rust-curve-specific }}" ]; then
          export SKIP_RUST_TESTS="${{ matrix.skip-rust-all-curves }} ${{ matrix.curve.metal-skip-rust-curve-specific }}"
        fi

        cargo test --release --no-default-features --features ${{ steps.feature_flags.outputs.RUST_TEST_FEATURES }} -- $SKIP_RUST_TESTS --skip phase2 --skip phase3 --skip phase4

        if [ "${{ needs.check-changed-files.outputs.rust-ntt }}" = "true" ]; then
          cargo test phase3 --release --no-default-features --features ${{ steps.feature_flags.outputs.RUST_TEST_FEATURES }} -- $SKIP_RUST_TESTS
        fi
        if [ "${{ needs.check-changed-files.outputs.rust-fri }}" = "true" && "${{ contains(matrix.curve.rust-supported-features, "fri") }}" = "true" ]; then
          cargo test phase4 --release --no-default-features --features ${{ steps.feature_flags.outputs.RUST_TEST_FEATURES }} -- $SKIP_RUST_TESTS
        fi
        
    - name: Setup go
      if: ${{ needs.check-changed-files.outputs.golang == 'true' && matrix.skip-golang-all-curves == 'false' }}
      uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b
      with:
        go-version: '1.22.0'
        cache: false
    - name: Run Golang curve Tests
      working-directory: ./wrappers/golang/curves
      if: ${{ needs.check-changed-files.outputs.golang == 'true' && matrix.skip-golang-all-curves == 'false' }}
      run: |
        CURVE=${{ matrix.curve.name }}
        CURVE_DIR=$(echo ${{ matrix.curve.name }} | sed -e 's/_//g')
        export ICICLE_BACKEND_INSTALL_DIR=${{ steps.curve-backend-flag.outputs.ICICLE_BACKEND_INSTALL_DIR }}
        export LD_LIBRARY_PATH=${{ steps.curve-backend-flag.outputs.INSTALL_PATH }}/lib
        export CGO_LDFLAGS="-L$LD_LIBRARY_PATH -licicle_field_$CURVE -licicle_curve_$CURVE  -lstdc++ -Wl,-rpath=LD_LIBRARY_PATH"
        
        go test ./$CURVE_DIR/tests -tags=${{ steps.feature_flags.outputs.GO_TEST_BUILD_TAGS }} -count=1 -failfast -p 2 -timeout 60m -v
