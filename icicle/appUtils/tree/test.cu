// #define DEBUG
// #define MERKLE_DEBUG

#define CURVE_ID 2
#include "../../curves/curve_config.cuh"
#include "../poseidon/optimized/poseidon.cu"
#include "merkle.cu"

#ifndef __CUDA_ARCH__
#include <cassert>
#include <chrono>
#include <fstream>
#include <iostream>
#include <math.h>

using namespace poseidon;
using namespace curve_config;

int main(int argc, char* argv[])
{
  using FpMilliseconds = std::chrono::duration<float, std::chrono::milliseconds::period>;
  using FpMicroseconds = std::chrono::duration<float, std::chrono::microseconds::period>;

  const int arity = 2;
  const int t = arity + 1;

  cudaStream_t stream;
  cudaStreamCreate(&stream);

  cudaEvent_t start_event, end_event;
  cudaEventCreate(&start_event);
  cudaEventCreate(&end_event);
  cudaEventRecord(start_event, stream);
  auto start_time1 = std::chrono::high_resolution_clock::now();
  OptimizedPoseidon<scalar_t> poseidon(arity, stream);

  auto end_time1 = std::chrono::high_resolution_clock::now();
  auto elapsed_time1 = std::chrono::duration_cast<std::chrono::microseconds>(end_time1 - start_time1);
  printf("Elapsed time poseidon: %.0f us\n", FpMicroseconds(elapsed_time1).count());

  uint32_t tree_height = 30;
  uint32_t number_of_leaves = pow(arity, (tree_height - 1));
  uint32_t cutoff_height = 7;
  size_t cutoff_leaves_len = pow(arity, (cutoff_height - 1));
  std::cout << "Cutoff leaves = " << cutoff_leaves_len << std::endl;
  size_t cutoff_digests_len = get_digests_len(cutoff_height, arity);
  std::cout << "Cutoff digests = " << cutoff_digests_len << std::endl;

  auto start_time2 = std::chrono::high_resolution_clock::now();
  scalar_t input = scalar_t::zero();
  scalar_t* leaves = static_cast<scalar_t*>(malloc(number_of_leaves * sizeof(scalar_t)));
  for (uint32_t i = 0; i < number_of_leaves; i++) {
    leaves[i] = input;
    input = input + scalar_t::one();
  }

  auto end_time2 = std::chrono::high_resolution_clock::now();
  auto elapsed_time2 = std::chrono::duration_cast<std::chrono::microseconds>(end_time2 - start_time2);
  printf("Leaves allocation: %.0f us\n", FpMicroseconds(elapsed_time2).count());

  size_t leaves_mem = number_of_leaves * sizeof(scalar_t);
  std::cout << "Memory for leaves = " << leaves_mem / 1024 / 1024 << " MB; " << leaves_mem / 1024 / 1024 / 1024 << " GB"
            << std::endl;
  std::cout << "Number of leaves = " << number_of_leaves << std::endl;

  auto start_time = std::chrono::high_resolution_clock::now();
  auto digests_len = get_digests_len(tree_height, arity);
  scalar_t* digests = static_cast<scalar_t*>(malloc(digests_len * sizeof(scalar_t)));
  size_t digests_mem = digests_len * sizeof(scalar_t);
  std::cout << "Memory for digests = " << digests_mem / 1024 / 1024 << " MB; " << digests_mem / 1024 / 1024 / 1024
            << " GB" << std::endl;
  std::cout << "Number of digest elements = " << digests_len << std::endl;

  std::cout << "Total RAM consumption = " << (digests_mem + leaves_mem) / 1024 / 1024 << " MB; "
            << (digests_mem + leaves_mem) / 1024 / 1024 / 1024 << " GB" << std::endl;
  build_merkle_tree<scalar_t>(leaves, digests, tree_height, poseidon, stream);
  auto end_time = std::chrono::high_resolution_clock::now();
  auto elapsed_time = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);
  auto tree_time = FpMicroseconds(elapsed_time).count();
  printf(
    "Elapsed time in merkle tree building: %.0f us, %.0f ms, %.2f s\n", tree_time, tree_time / 1000,
    tree_time / 1000 / 1000);
  cudaEventRecord(end_event, stream);
  cudaEventSynchronize(end_event);

  float elapsedTime;
  cudaEventElapsedTime(&elapsedTime, start_event, end_event);
  printf("Elapsed time: %8.3f ms\n", elapsedTime);

  /// Use this to generate test vectors
  // for (int i = 0; i < cutoff_leaves_len; i++) {
  //   scalar_t el = digests[digests_len - cutoff_leaves_len - cutoff_digests_len - 1 + i];
  //   std::cout << "{";
  //   for (int j = 0; j < 8; j++) {
  //     std::cout << ((uint32_t*)&el.limbs_storage)[j];
  //     if (j != 7) {
  //       std::cout << ", ";
  //     }
  //   }
  //   std::cout << "}," << std::endl;
  // }

  scalar_t expected[64] = {
    {905110889, 2054287011, 250386268, 4100095149, 714955016, 1163050870, 241999637, 73307332},
    {1913310732, 564832490, 732308813, 2586688178, 4054037287, 2720587232, 909207782, 1001626679},
    {4229590794, 3110228758, 4161959585, 4143451607, 1274301898, 499710233, 2801297171, 1696629637},
    {4283094591, 2041587860, 4272909686, 3032518657, 1275782421, 638738833, 562322176, 1764251529},
    {2166709661, 2507730084, 2167347676, 730353949, 4164042092, 702353215, 1692356174, 630374766},
    {4139857027, 2019739214, 1365461556, 190724658, 3746881101, 1551936264, 2542716346, 641014892},
    {3705816562, 1108147156, 1905372056, 2828808730, 1103318054, 1094456706, 1691237212, 559553895},
    {4190357473, 2752760058, 3475907929, 138551448, 2308123641, 1481331661, 4250021059, 794197070},
    {2204086692, 2614018999, 4066699829, 2915251952, 1331110005, 2166000553, 3772671276, 708029528},
    {3657760721, 2239870589, 436271478, 2779795192, 24689995, 1297075264, 1671988556, 523339184},
    {884023061, 652621983, 62069329, 1533423970, 279751135, 1384150035, 2787913666, 1184536494},
    {3832683369, 3220024363, 3898646445, 3616156349, 1816361908, 58265014, 2258645744, 1322185408},
    {2186663972, 992823504, 580939809, 4134674086, 3099356555, 1833300007, 689911450, 1656492952},
    {702913923, 1119558248, 3418804320, 2560686829, 3844756959, 2394009955, 1587731805, 1401231027},
    {3358386685, 971450419, 3942097807, 1751903613, 2010516544, 1867306049, 3690714201, 1210488397},
    {3401698520, 536404836, 794977212, 3865401272, 293002110, 51547193, 2792668565, 794288943},
    {2535122179, 3301198404, 1831226988, 939065116, 2928600716, 482930544, 1250716156, 1762491790},
    {3845825241, 3861370739, 532697761, 2620889068, 2404746527, 2320305094, 1751653452, 1188499070},
    {2294710826, 1510032739, 313612229, 2695885979, 930054391, 533134921, 119566344, 477928610},
    {2848284274, 1387569447, 3427902513, 1815210984, 1796084242, 2477162476, 1076650422, 178217702},
    {477491016, 64915466, 2413363741, 1704776383, 2310396287, 3542786349, 3266480600, 1271377072},
    {640898189, 1598892256, 619056656, 2983431528, 926332313, 1262770967, 1590462612, 1158071674},
    {1535365851, 969632361, 3455028962, 3859076473, 713229223, 160794559, 522363337, 1938462774},
    {2056885534, 1523647921, 1453469260, 789838162, 2488613458, 2138368141, 2626654049, 1817731952},
    {762949857, 2536235273, 1719556868, 285515008, 2474751041, 2568567690, 2318320125, 400357715},
    {1867581020, 1385643217, 1496358416, 3894560515, 4263450495, 4260782388, 1582925909, 1145585979},
    {819633113, 3551761993, 4223422725, 2012143897, 162230731, 313217442, 877460545, 1036488563},
    {372840095, 2777114981, 3609704986, 4194839220, 835428854, 3753909382, 868857871, 577250152},
    {1594748136, 1072150419, 215666198, 1876880530, 3521966486, 3549157259, 2705048665, 1586280906},
    {2756567491, 2245134964, 2379857807, 2814297695, 1847389630, 1548074096, 1735617232, 1217774930},
    {844019344, 1443921173, 3771721239, 1915149043, 2432187483, 2127483673, 4129586255, 1353847570},
    {679519458, 2289400626, 2086307003, 786404148, 4091262765, 690220603, 3966652691, 1943870940},
    {1867230583, 336910666, 569206020, 2977920403, 1646723668, 2923133024, 1893351426, 574662319},
    {3144099552, 3974775462, 3837641663, 1666870850, 1328417146, 2497841584, 1369604279, 1407959668},
    {3359068120, 3406301556, 2222905063, 454189232, 2785900814, 3020867864, 1511162768, 929226103},
    {153253891, 2972740516, 6888675, 1874147652, 488595774, 710198496, 95761789, 137424331},
    {2852629395, 1983211187, 2275075522, 823698557, 1026969354, 1904615822, 1672203624, 761622130},
    {2459895826, 1590185451, 191760521, 1853339530, 459367964, 4205056097, 4262457323, 1470432235},
    {2309997690, 3891715327, 2495098072, 1589505364, 791160606, 2740350160, 3727846138, 590576255},
    {172072998, 3451365741, 85640999, 3035582297, 128487064, 2216391395, 1706536373, 683964728},
    {3648569962, 516462839, 405595964, 2215643109, 2239697964, 537720627, 3191862748, 5710658},
    {3073509330, 1884988813, 3972845062, 3965002442, 343813509, 1216833646, 3435899596, 549986196},
    {1516541553, 104443287, 2112394649, 2235444143, 1722226071, 771044352, 3383668888, 944298366},
    {414510892, 2420442758, 277536030, 2965089686, 3612703841, 1326592426, 594233299, 9642941},
    {1281767511, 2305447479, 3406034377, 2820761557, 1911287054, 3360096803, 3869041376, 1010809572},
    {4230227747, 1129706261, 785372228, 4148265583, 999925985, 1573852373, 1383330779, 1562862673},
    {2511680580, 2026186127, 1424936000, 4200548301, 1938270444, 756030220, 2840950163, 1294158509},
    {4293209328, 1819313714, 253965678, 2190555391, 3806398956, 3313176225, 2159059410, 672374526},
    {1504892617, 180609673, 412747610, 4121881918, 4029061363, 351607956, 3019833371, 289517269},
    {596953330, 3931896784, 3800026454, 2259093931, 2763050921, 1545772021, 2137640051, 712110224},
    {2022852724, 1333279058, 3803709784, 547760144, 3800433200, 719318326, 2125299662, 909533735},
    {4157682518, 1384117520, 2630466814, 3243298835, 3347600075, 31421936, 2403524996, 996230467},
    {1802270547, 1311011839, 1152110621, 860191208, 1578360327, 3632581308, 2613127667, 626497968},
    {3508371231, 3852831356, 3213184924, 24785090, 2366749759, 481743228, 530124129, 721150053},
    {891591628, 2391869183, 3272894788, 2569513571, 3290406582, 361765820, 479699116, 531511193},
    {3961094227, 2854101659, 531193251, 3747813293, 3410564394, 2494662373, 1348187829, 465748682},
    {1087292029, 4001841271, 886854553, 3731456158, 1385603901, 1722773341, 837685300, 1127292342},
    {1724406846, 1119766019, 400092340, 338923319, 4272648995, 267983343, 4166678596, 519948503},
    {3420132580, 2127142720, 783354871, 3614835907, 4035528390, 944280707, 3933058353, 1920927462},
    {1385932514, 3158562257, 2987533436, 582488218, 3144777688, 1030356902, 2126241520, 1169707024},
    {508835744, 2050928177, 623705719, 2834634953, 1041195886, 3358450231, 2926999150, 792818255},
    {3726904211, 1980141368, 4275293362, 4038680736, 364375764, 1247079173, 1330413003, 1311385460},
    {3997749851, 261683764, 3850537174, 117768537, 2623759096, 98488784, 3360083723, 166071931},
    {3658161859, 2843687464, 4116017919, 3935649861, 47399687, 2734724905, 1650236774, 1910815459},
  };

  for (int i = 0; i < cutoff_leaves_len; i++) {
    scalar_t root = digests[digests_len - cutoff_leaves_len - cutoff_digests_len - 1 + i];
    std::cout << root << " === " << expected[i] << std::endl;
    assert(root == expected[i]);
  }

  cudaEventDestroy(start_event);
  cudaEventDestroy(end_event);
  free(leaves);
}

#endif