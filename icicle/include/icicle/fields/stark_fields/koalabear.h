#pragma once

#include "icicle/math/storage.h"
#include "icicle/fields/field.h"
#include "icicle/fields/quartic_extension.h"
#include "icicle/fields/params_gen.h"

namespace koalabear {
  struct fp_config {
    static constexpr storage<1> modulus = {0x7f000001};
    static constexpr unsigned reduced_digits_count = 18;
    static constexpr storage_array<reduced_digits_count, 1> reduced_digits = {
      {{0x00000001},
       {0x01fffffe},
       {0x17f7efe4},
       {0x18af7f37},
       {0x423d7c8c},
       {0x1b79fadf},
       {0x7b9d44cd},
       {0x64d31ca2},
       {0x5bc34d59},
       {0x0f077438},
       {0x4fb48092},
       {0x2d55aa32},
       {0x389de76c},
       {0x02dff10b},
       {0x023486f8},
       {0x4e8e0e2d},
       {0x55a7320c},
       {0x50584c83}}};
    PARAMS(modulus)
    MOD_SQR_SUBS()
    static constexpr storage_array<mod_subs_count, 2 * limbs_count + 2> mod_subs = {
      {{0x00000000, 0x00000000, 0x00000000, 0x00000000}, {0xbd810203, 0x1fffffff, 0x00000000, 0x00000000},
       {0xfa020407, 0x3fffffff, 0x00000000, 0x00000000}, {0xb783060a, 0x5fffffff, 0x00000000, 0x00000000},
       {0xf404080e, 0x7fffffff, 0x00000000, 0x00000000}, {0xb1850a11, 0x9fffffff, 0x00000000, 0x00000000},
       {0xee060c15, 0xbfffffff, 0x00000000, 0x00000000}, {0xab870e18, 0xdfffffff, 0x00000000, 0x00000000},
       {0xe808101c, 0xffffffff, 0x00000000, 0x00000000}, {0xa589121f, 0x1fffffff, 0x00000001, 0x00000000},
       {0xe20a1423, 0x3fffffff, 0x00000001, 0x00000000}, {0x9f8b1626, 0x5fffffff, 0x00000001, 0x00000000},
       {0xdc0c182a, 0x7fffffff, 0x00000001, 0x00000000}, {0x998d1a2d, 0x9fffffff, 0x00000001, 0x00000000},
       {0xd60e1c31, 0xbfffffff, 0x00000001, 0x00000000}, {0x938f1e34, 0xdfffffff, 0x00000001, 0x00000000},
       {0xd0102038, 0xffffffff, 0x00000001, 0x00000000}, {0x8d91223b, 0x1fffffff, 0x00000002, 0x00000000},
       {0xca12243f, 0x3fffffff, 0x00000002, 0x00000000}, {0x87932642, 0x5fffffff, 0x00000002, 0x00000000},
       {0xc4142846, 0x7fffffff, 0x00000002, 0x00000000}, {0x81952a49, 0x9fffffff, 0x00000002, 0x00000000},
       {0xbe162c4d, 0xbfffffff, 0x00000002, 0x00000000}, {0xfa972e51, 0xdfffffff, 0x00000002, 0x00000000},
       {0xb8183054, 0xffffffff, 0x00000002, 0x00000000}, {0xf4993258, 0x1fffffff, 0x00000003, 0x00000000},
       {0xb21a345b, 0x3fffffff, 0x00000003, 0x00000000}, {0xee9b365f, 0x5fffffff, 0x00000003, 0x00000000},
       {0xac1c3862, 0x7fffffff, 0x00000003, 0x00000000}, {0xe89d3a66, 0x9fffffff, 0x00000003, 0x00000000},
       {0xa61e3c69, 0xbfffffff, 0x00000003, 0x00000000}, {0xe29f3e6d, 0xdfffffff, 0x00000003, 0x00000000},
       {0xa0204070, 0xffffffff, 0x00000003, 0x00000000}, {0xdca14274, 0x1fffffff, 0x00000004, 0x00000000},
       {0xd6a3467b, 0x5fffffff, 0x00000004, 0x00000000}, {0x9a224477, 0x3fffffff, 0x00000004, 0x00000000},
       {0x9424487e, 0x7fffffff, 0x00000004, 0x00000000}, {0xd0a54a82, 0x9fffffff, 0x00000004, 0x00000000},
       {0x8e264c85, 0xbfffffff, 0x00000004, 0x00000000}, {0xcaa74e89, 0xdfffffff, 0x00000004, 0x00000000},
       {0x8828508c, 0xffffffff, 0x00000004, 0x00000000}, {0xc4a95290, 0x1fffffff, 0x00000005, 0x00000000},
       {0x822a5493, 0x3fffffff, 0x00000005, 0x00000000}, {0xbeab5697, 0x5fffffff, 0x00000005, 0x00000000},
       {0xfb2c589b, 0x7fffffff, 0x00000005, 0x00000000}, {0xb8ad5a9e, 0x9fffffff, 0x00000005, 0x00000000},
       {0xf52e5ca2, 0xbfffffff, 0x00000005, 0x00000000}, {0xb2af5ea5, 0xdfffffff, 0x00000005, 0x00000000},
       {0xef3060a9, 0xffffffff, 0x00000005, 0x00000000}, {0xacb162ac, 0x1fffffff, 0x00000006, 0x00000000},
       {0xe93264b0, 0x3fffffff, 0x00000006, 0x00000000}, {0xa6b366b3, 0x5fffffff, 0x00000006, 0x00000000},
       {0xe33468b7, 0x7fffffff, 0x00000006, 0x00000000}, {0xa0b56aba, 0x9fffffff, 0x00000006, 0x00000000},
       {0xdd366cbe, 0xbfffffff, 0x00000006, 0x00000000}, {0x9ab76ec1, 0xdfffffff, 0x00000006, 0x00000000},
       {0xd73870c5, 0xffffffff, 0x00000006, 0x00000000}, {0x94b972c8, 0x1fffffff, 0x00000007, 0x00000000},
       {0xd13a74cc, 0x3fffffff, 0x00000007, 0x00000000}, {0x8ebb76cf, 0x5fffffff, 0x00000007, 0x00000000},
       {0xcb3c78d3, 0x7fffffff, 0x00000007, 0x00000000}, {0x88bd7ad6, 0x9fffffff, 0x00000007, 0x00000000},
       {0xc53e7cda, 0xbfffffff, 0x00000007, 0x00000000}, {0x82bf7edd, 0xdfffffff, 0x00000007, 0x00000000},
       {0xbf4080e1, 0xffffffff, 0x00000007, 0x00000000}, {0xfbc182e5, 0x1fffffff, 0x00000008, 0x00000000},
       {0xb94284e8, 0x3fffffff, 0x00000008, 0x00000000}, {0xf5c386ec, 0x5fffffff, 0x00000008, 0x00000000},
       {0xb34488ef, 0x7fffffff, 0x00000008, 0x00000000}, {0xefc58af3, 0x9fffffff, 0x00000008, 0x00000000},
       {0xad468cf6, 0xbfffffff, 0x00000008, 0x00000000}, {0xe9c78efa, 0xdfffffff, 0x00000008, 0x00000000}}};

    static constexpr storage<1> rou = {0x6ac49f88};
    TWIDDLES(modulus, rou)

    // nonresidue to generate the extension field
    static constexpr uint32_t nonresidue = 3;
    // true if nonresidue is negative.
    static constexpr bool nonresidue_is_negative = false;
  };

  /**
   * Scalar field. Is always a prime field.
   */
  typedef Field<fp_config> scalar_t;

  /**
   * Quartic extension field of `scalar_t` enabled if `-DEXT_FIELD` env variable is.
   */
  typedef QuarticExtensionField<fp_config, scalar_t> q_extension_t;

  /**
   * The default extension type
   */
  typedef q_extension_t extension_t;
} // namespace koalabear
