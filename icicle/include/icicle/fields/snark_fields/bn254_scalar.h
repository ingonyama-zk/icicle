#pragma once

#include "icicle/fields/storage.h"
#include "icicle/fields/field.h"
#include "icicle/fields/params_gen.h"

namespace bn254 {
  struct fp_config {
    static constexpr storage<8> modulus = {0xf0000001, 0x43e1f593, 0x79b97091, 0x2833e848,
                                           0x8181585d, 0xb85045b6, 0xe131a029, 0x30644e72};
    static constexpr unsigned reduced_digits_count = 3;
    static constexpr storage_array<reduced_digits_count, 8> reduced_digits = {
      {{0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
       {0x4ffffffb, 0xac96341c, 0x9f60cd29, 0x36fc7695, 0x7879462e, 0x666ea36f, 0x9a07df2f, 0x0e0a77c1},
       {0xae216da7, 0x1bb8e645, 0xe35c59e3, 0x53fe3ab1, 0x53bb8085, 0x8c49833d, 0x7f4e44a5, 0x0216d0b1}}};
    PARAMS(modulus)
    MOD_SQR_SUBS()
    static constexpr storage_array<mod_subs_count, 2 * limbs_count + 2> mod_subs = {
      {{0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000},
       {0x3f0ef492, 0x6a19b0f2, 0xd1cc3d3f, 0x0df780b1, 0x803516f3, 0x3b9efd6f, 0xb416c8ba, 0xda20ec30, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x07ffffff, 0x00000000, 0x00000000},
       {0x6e1de925, 0x18155778, 0x1d51eb10, 0x4422e9ac, 0x81eb8643, 0x2f8e4095, 0x495f319e, 0xe4a626d4, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x0fffffff, 0x00000000, 0x00000000},
       {0x9d2cddb8, 0xc610fdfe, 0x68d798e0, 0x7a4e52a6, 0x83a1f593, 0x237d83bb, 0xdea79a82, 0xef2b6177, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x17ffffff, 0x00000000, 0x00000000},
       {0xcc3bd24b, 0x740ca484, 0xb45d46b1, 0xb079bba0, 0x855864e3, 0x176cc6e1, 0x73f00366, 0xf9b09c1b, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x1fffffff, 0x00000000, 0x00000000},
       {0x0b4ac6dd, 0xde265577, 0x862983f0, 0xbe713c52, 0x058d7bd6, 0x530bc451, 0x2806cc20, 0xd3d1884c, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x27ffffff, 0x00000000, 0x00000000},
       {0x3a59bb70, 0x8c21fbfd, 0xd1af31c1, 0xf49ca54c, 0x0743eb26, 0x46fb0777, 0xbd4f3504, 0xde56c2ef, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x2fffffff, 0x00000000, 0x00000000},
       {0x6968b003, 0x3a1da283, 0x1d34df92, 0x2ac80e47, 0x08fa5a77, 0x3aea4a9d, 0x52979de8, 0xe8dbfd93, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x37ffffff, 0x00000000, 0x00000000},
       {0x9877a496, 0xe8194909, 0x68ba8d62, 0x60f37741, 0x0ab0c9c7, 0x2ed98dc3, 0xe7e006cc, 0xf3613836, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x3fffffff, 0x00000000, 0x00000000},
       {0xc7869929, 0x9614ef8f, 0xb4403b33, 0x971ee03b, 0x0c673917, 0x22c8d0e9, 0x7d286fb0, 0xfde672da, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x47ffffff, 0x00000000, 0x00000000},
       {0x06958dbb, 0x002ea082, 0x860c7873, 0xa51660ed, 0x8c9c500a, 0x5e67ce58, 0x313f386a, 0xd8075f0b, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x4fffffff, 0x00000000, 0x00000000},
       {0x35a4824e, 0xae2a4708, 0xd1922643, 0xdb41c9e7, 0x8e52bf5a, 0x5257117e, 0xc687a14e, 0xe28c99ae, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x57ffffff, 0x00000000, 0x00000000},
       {0x64b376e1, 0x5c25ed8e, 0x1d17d414, 0x116d32e2, 0x90092eab, 0x464654a4, 0x5bd00a32, 0xed11d452, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x5fffffff, 0x00000000, 0x00000000},
       {0x93c26b74, 0x0a219414, 0x689d81e5, 0x47989bdc, 0x91bf9dfb, 0x3a3597ca, 0xf1187316, 0xf7970ef5, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x67ffffff, 0x00000000, 0x00000000},
       {0xd2d16006, 0x743b4506, 0x3a69bf24, 0x55901c8e, 0x11f4b4ee, 0x75d4953a, 0xa52f3bd0, 0xd1b7fb26, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x6fffffff, 0x00000000, 0x00000000},
       {0x01e05499, 0x2236eb8d, 0x85ef6cf5, 0x8bbb8588, 0x13ab243e, 0x69c3d860, 0x3a77a4b4, 0xdc3d35ca, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x77ffffff, 0x00000000, 0x00000000},
       {0x30ef492c, 0xd0329213, 0xd1751ac5, 0xc1e6ee82, 0x1561938e, 0x5db31b86, 0xcfc00d98, 0xe6c2706d, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x7fffffff, 0x00000000, 0x00000000},
       {0x5ffe3dbf, 0x7e2e3899, 0x1cfac896, 0xf812577d, 0x171802de, 0x51a25eac, 0x6508767c, 0xf147ab11, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x87ffffff, 0x00000000, 0x00000000},
       {0x8f0d3252, 0x2c29df1f, 0x68807667, 0x2e3dc077, 0x18ce722f, 0x4591a1d2, 0xfa50df60, 0xfbcce5b4, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x8fffffff, 0x00000000, 0x00000000},
       {0xce1c26e4, 0x96439011, 0x3a4cb3a6, 0x3c354129, 0x99038922, 0x81309f41, 0xae67a81a, 0xd5edd1e5, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x97ffffff, 0x00000000, 0x00000000},
       {0xfd2b1b77, 0x443f3697, 0x85d26177, 0x7260aa23, 0x9ab9f872, 0x751fe267, 0x43b010fe, 0xe0730c89, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x9fffffff, 0x00000000, 0x00000000},
       {0x2c3a100a, 0xf23add1e, 0xd1580f47, 0xa88c131d, 0x9c7067c2, 0x690f258d, 0xd8f879e2, 0xeaf8472c, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xa7ffffff, 0x00000000, 0x00000000},
       {0x5b49049d, 0xa03683a4, 0x1cddbd18, 0xdeb77c18, 0x9e26d712, 0x5cfe68b3, 0x6e40e2c6, 0xf57d81d0, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xafffffff, 0x00000000, 0x00000000},
       {0x9a57f92f, 0x0a503496, 0xeea9fa58, 0xecaefcc9, 0x1e5bee05, 0x989d6623, 0x2257ab80, 0xcf9e6e01, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xb7ffffff, 0x00000000, 0x00000000}}};

    static constexpr storage<8> rou = {0x725b19f0, 0x9bd61b6e, 0x41112ed4, 0x402d111e,
                                       0x8ef62abc, 0x00e0a7eb, 0xa58a7e85, 0x2a3c09f0};
    TWIDDLES(modulus, rou)
  };

  /**
   * Scalar field. Is always a prime field.
   */
  typedef Field<fp_config> scalar_t;
} // namespace bn254
