#!/usr/bin/env python3
"""
This script generates extern declarators for every curve/field
"""

from pathlib import Path

API_PATH = Path(__file__).resolve().parent
TEMPLATES_PATH = API_PATH.joinpath("templates")

CURVES_MODULES = {
    "curve",
    "msm",
    "ecntt"
}

FIELDS_MODULES = {
    "field",
    "ntt",
    "poseidon",
}

CURVES_CONFIG = {
    "bn254": {},
    "bls12_381": {},
    "bls12_377": {},
    "bw6_761": {},
    "grumpkin": {"ecntt", "g2", "ntt"},
}

FIELDS_CONFIG = {
    "babybear": {"poseidon"}
}

WARN_TEXT = """\
// WARNING: This file is auto-generated by a script.
// Any changes made to this file may be overwritten.
// Please modify the code generation script instead.
// Path to the code generation script: icicle/include/api/gen_c_api.py


"""

if __name__ == "__main__":

    # Generate API for ingo_curve
    for curve, skip in CURVES_CONFIG.items():
        for module in CURVES_MODULES | FIELDS_MODULES - set(skip):
            module_templates_path = TEMPLATES_PATH.joinpath(module)

            module_path = API_PATH.joinpath(curve).joinpath(module)
            module_path.mkdir(parents=True, exist_ok=True)

            for header_template in module_templates_path.iterdir():
                if "ext" in header_template.name and "ext" in skip:
                    continue

                if "g2" in header_template.name and "g2" in skip:
                    continue

                contents = open(header_template).read()
                contents = contents.replace("${FIELD}", curve)
                contents = contents.replace("${FIELD_UPPER}", curve.upper())
                contents = contents.replace("${FIELD_HEADER}", f"fields/snark_fields/{curve}_scalar.cuh")
                contents = contents.replace("${CURVE}", curve)
                contents = contents.replace("${CURVE_UPPER}", curve.upper())
                with open(module_path.joinpath(header_template.name), "w") as f:
                    f.write(WARN_TEXT)
                    f.write(contents)

    # Generate API for ingo_field
    for field, skip in FIELDS_CONFIG.items():
        for module in FIELDS_MODULES - set(skip):
            module_templates_path = TEMPLATES_PATH.joinpath(module)

            module_path = API_PATH.joinpath(field).joinpath(module)
            module_path.mkdir(parents=True, exist_ok=True)

            for header_template in module_templates_path.iterdir():
                if "ext" in header_template.name and "ext" in skip:
                    continue

                contents = open(header_template).read()
                contents = contents.replace("${FIELD}", field)
                contents = contents.replace("${FIELD_UPPER}", field.upper())
                contents = contents.replace("${FIELD_HEADER}", f"fields/stark_fields/{field}.cuh")
                with open(module_path.joinpath(header_template.name), "w") as f:
                    f.write(WARN_TEXT)
                    f.write(contents)