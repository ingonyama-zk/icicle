// WARNING: This file is auto-generated by a script.
// Any changes made to this file may be overwritten.
// Please modify the code generation script instead.
// Path to the code generation script: scripts/gen_c_api.py

#pragma once
#ifndef BN254_API_H
#define BN254_API_H

#include <cuda_runtime.h>
#include "gpu-utils/device_context.cuh"
#include "curves/params/bn254.cuh"
#include "ntt/ntt.cuh"
#include "msm/msm.cuh"
#include "vec_ops/vec_ops.cuh"
#include "poseidon/poseidon.cuh"
#include "poseidon/tree/merkle.cuh"

extern "C" cudaError_t bn254G2PrecomputeMSMBases(
  bn254::g2_affine_t* bases,
  int bases_size,
  int precompute_factor,
  int _c,
  bool are_bases_on_device,
  device_context::DeviceContext& ctx,
  bn254::g2_affine_t* output_bases);

extern "C" cudaError_t bn254G2MSMCuda(
  const bn254::scalar_t* scalars, const bn254::g2_affine_t* points, int msm_size, msm::MSMConfig& config, bn254::g2_projective_t* out);

extern "C" cudaError_t bn254PrecomputeMSMBases(
  bn254::affine_t* bases,
  int bases_size,
  int precompute_factor,
  int _c,
  bool are_bases_on_device,
  device_context::DeviceContext& ctx,
  bn254::affine_t* output_bases);

extern "C" cudaError_t bn254MSMCuda(
  const bn254::scalar_t* scalars, const bn254::affine_t* points, int msm_size, msm::MSMConfig& config, bn254::projective_t* out);

extern "C" bool bn254G2Eq(bn254::g2_projective_t* point1, bn254::g2_projective_t* point2);

extern "C" void bn254G2ToAffine(bn254::g2_projective_t* point, bn254::g2_affine_t* point_out);

extern "C" void bn254G2GenerateProjectivePoints(bn254::g2_projective_t* points, int size);

extern "C" void bn254G2GenerateAffinePoints(bn254::g2_affine_t* points, int size);

extern "C" cudaError_t bn254G2AffineConvertMontgomery(
  bn254::g2_affine_t* d_inout, size_t n, bool is_into, device_context::DeviceContext& ctx);

extern "C" cudaError_t bn254G2ProjectiveConvertMontgomery(
  bn254::g2_projective_t* d_inout, size_t n, bool is_into, device_context::DeviceContext& ctx);

extern "C" cudaError_t bn254ECNTTCuda(
  const bn254::projective_t* input, int size, ntt::NTTDir dir, ntt::NTTConfig<bn254::scalar_t>& config, bn254::projective_t* output);

extern "C" bool bn254Eq(bn254::projective_t* point1, bn254::projective_t* point2);

extern "C" void bn254ToAffine(bn254::projective_t* point, bn254::affine_t* point_out);

extern "C" void bn254GenerateProjectivePoints(bn254::projective_t* points, int size);

extern "C" void bn254GenerateAffinePoints(bn254::affine_t* points, int size);

extern "C" cudaError_t bn254AffineConvertMontgomery(
  bn254::affine_t* d_inout, size_t n, bool is_into, device_context::DeviceContext& ctx);

extern "C" cudaError_t bn254ProjectiveConvertMontgomery(
  bn254::projective_t* d_inout, size_t n, bool is_into, device_context::DeviceContext& ctx);

extern "C" cudaError_t bn254ExtensionNTTCuda(
  const bn254::extension_t* input, int size, ntt::NTTDir dir, ntt::NTTConfig<bn254::scalar_t>& config, bn254::extension_t* output);

extern "C" cudaError_t bn254PoseidonHash(
  bn254::scalar_t* input,
  bn254::scalar_t* output,
  int number_of_states,
  int arity,
  const poseidon::PoseidonConstants<bn254::scalar_t>& constants,
  poseidon::PoseidonConfig& config);

extern "C" cudaError_t bn254BuildPoseidonMerkleTree(
  const bn254::scalar_t* leaves,
  bn254::scalar_t* digests,
  uint32_t height,
  int arity,
  poseidon::PoseidonConstants<bn254::scalar_t>& constants,
  merkle::TreeBuilderConfig& config);

extern "C" cudaError_t bn254MulCuda(
  bn254::scalar_t* vec_a, bn254::scalar_t* vec_b, int n, vec_ops::VecOpsConfig<bn254::scalar_t>& config, bn254::scalar_t* result);

extern "C" cudaError_t bn254AddCuda(
  bn254::scalar_t* vec_a, bn254::scalar_t* vec_b, int n, vec_ops::VecOpsConfig<bn254::scalar_t>& config, bn254::scalar_t* result);

extern "C" cudaError_t bn254SubCuda(
  bn254::scalar_t* vec_a, bn254::scalar_t* vec_b, int n, vec_ops::VecOpsConfig<bn254::scalar_t>& config, bn254::scalar_t* result);

extern "C" cudaError_t bn254TransposeMatrix(
  const bn254::scalar_t* input,
  uint32_t row_size,
  uint32_t column_size,
  bn254::scalar_t* output,
  device_context::DeviceContext& ctx,
  bool on_device,
  bool is_async);

extern "C" void bn254GenerateScalars(bn254::scalar_t* scalars, int size);

extern "C" cudaError_t bn254ScalarConvertMontgomery(
  bn254::scalar_t* d_inout, size_t n, bool is_into, device_context::DeviceContext& ctx);

extern "C" cudaError_t bn254InitializeDomain(
  bn254::scalar_t* primitive_root, device_context::DeviceContext& ctx, bool fast_twiddles_mode);

extern "C" cudaError_t bn254NTTCuda(
  const bn254::scalar_t* input, int size, ntt::NTTDir dir, ntt::NTTConfig<bn254::scalar_t>& config, bn254::scalar_t* output);

extern "C" cudaError_t bn254ReleaseDomain(device_context::DeviceContext& ctx);

extern "C" void bn254ExtensionGenerateScalars(bn254::extension_t* scalars, int size);

extern "C" cudaError_t bn254ExtensionScalarConvertMontgomery(
  bn254::extension_t* d_inout, size_t n, bool is_into, device_context::DeviceContext& ctx);

extern "C" cudaError_t bn254ExtensionMulCuda(
  bn254::extension_t* vec_a, bn254::extension_t* vec_b, int n, vec_ops::VecOpsConfig<bn254::extension_t>& config, bn254::extension_t* result);

extern "C" cudaError_t bn254ExtensionAddCuda(
  bn254::extension_t* vec_a, bn254::extension_t* vec_b, int n, vec_ops::VecOpsConfig<bn254::extension_t>& config, bn254::extension_t* result);

extern "C" cudaError_t bn254ExtensionSubCuda(
  bn254::extension_t* vec_a, bn254::extension_t* vec_b, int n, vec_ops::VecOpsConfig<bn254::extension_t>& config, bn254::extension_t* result);

extern "C" cudaError_t bn254ExtensionTransposeMatrix(
  const bn254::extension_t* input,
  uint32_t row_size,
  uint32_t column_size,
  bn254::extension_t* output,
  device_context::DeviceContext& ctx,
  bool on_device,
  bool is_async);

#endif