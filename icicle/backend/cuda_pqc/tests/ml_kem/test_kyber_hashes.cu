#include <cuda_runtime.h>
#include "ml_kem/ring/cuda_zq.cuh"
#include "ml_kem/hash/cuda_hashes.cuh"

#include <gtest/gtest.h>
#include <iostream>
#include <random>

#include "icicle/runtime.h"
#include "icicle/utils/log.h"

#include <string>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <vector>

#include "test_base.h"
#include "icicle/utils/rand_gen.h"

using namespace icicle;
using namespace icicle::pqc::ml_kem;

class HashTest : public IcicleTestBase
{
public:
  template <typename T>
  static void randomize(T* arr, uint64_t size)
  {
    // Fill the array with random values
    uint32_t* u32_arr = (uint32_t*)arr;
    for (int i = 0; i < (size * sizeof(T) / sizeof(uint32_t)); ++i) {
      u32_arr[i] = rand_uint_32b();
    }
  }

  static std::string voidPtrToHexString(const std::byte* byteData, size_t size)
  {
    std::ostringstream hexStream;
    for (size_t i = 0; i < size; ++i) {
      // Use fully qualified names for std::hex, std::setw, and std::setfill
      hexStream << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(byteData[i]);
    }

    return hexStream.str();
  }
};

__global__ void test_G_m_ek_hash_kernel(const uint8_t m[32], const uint8_t hashed_ek[32], uint8_t g[64])
{
  G_m_ek(m, hashed_ek, g);
}

TEST_F(HashTest, G_m_ek)
{
  uint8_t reference_m[3][32] = {
    {0xf6, 0x1a, 0x7a, 0xb4, 0x46, 0x71, 0xfd, 0x67, 0x5a, 0x59, 0x0e, 0x76, 0x42, 0x01, 0xa3, 0x12,
     0xe3, 0x6d, 0x54, 0x13, 0xeb, 0x3b, 0xaa, 0x1f, 0x99, 0x0b, 0x57, 0xaa, 0x4b, 0xc8, 0x89, 0x71},
    {0xbd, 0x07, 0x79, 0xde, 0xe2, 0x07, 0xe2, 0xd4, 0x1a, 0x66, 0x7e, 0xe0, 0xb5, 0x6d, 0xf0, 0xcb,
     0xf3, 0xbe, 0xdd, 0xd2, 0x7d, 0x94, 0xcf, 0x11, 0xc0, 0xc3, 0xba, 0x54, 0x59, 0x75, 0x9f, 0x16},
    {0xba, 0xdd, 0x88, 0x18, 0x72, 0xaa, 0xb2, 0x7f, 0x39, 0x0f, 0x95, 0x84, 0x0e, 0xd2, 0xc8, 0xfa,
     0xb4, 0x6a, 0xe7, 0x67, 0xb8, 0x23, 0xd0, 0x5e, 0x11, 0x7e, 0xe7, 0x0a, 0x69, 0x01, 0xfa, 0x88},
  };

  uint8_t reference_hashed_ek[3][32] = {
    {0x5b, 0xda, 0x53, 0xd2, 0x9c, 0xea, 0x09, 0xe7, 0xbd, 0xa9, 0x25, 0x14, 0xa3, 0x26, 0x06, 0x81,
     0xb8, 0x36, 0xfc, 0xb0, 0xfa, 0x4a, 0xd0, 0x6f, 0xd1, 0x91, 0x54, 0x95, 0x60, 0x7c, 0x75, 0x64},
    {0x2f, 0x88, 0x33, 0xbc, 0x24, 0xd3, 0xe3, 0x22, 0xca, 0x2f, 0x79, 0x92, 0x14, 0x07, 0x02, 0x11,
     0xe7, 0x03, 0x83, 0x60, 0x5c, 0x1b, 0x76, 0x56, 0xce, 0x56, 0x8c, 0x54, 0xe7, 0xb5, 0x5d, 0xce},
    {0x19, 0xd9, 0x49, 0x8b, 0x39, 0xbf, 0x34, 0xe1, 0x58, 0x10, 0x15, 0x6b, 0x35, 0x5c, 0xea, 0x6e,
     0x74, 0xaa, 0xdc, 0x61, 0xdb, 0xfb, 0x91, 0xf5, 0x5a, 0xeb, 0x6b, 0xff, 0x7a, 0xb9, 0x41, 0xf8},
  };

  uint8_t reference_g[3][64] = {
    {0xee, 0x47, 0xfd, 0x18, 0x0b, 0xa0, 0x2c, 0x9f, 0x53, 0x44, 0xef, 0xe6, 0x0c, 0x61, 0x82, 0x2d,
     0x71, 0x16, 0x67, 0xa5, 0xb3, 0x5e, 0x67, 0xe6, 0x46, 0x47, 0xbc, 0xfd, 0x96, 0xdf, 0x73, 0xba,
     0x8e, 0x45, 0x73, 0xe8, 0xf1, 0x9e, 0x5a, 0x4a, 0xd3, 0x15, 0x55, 0xb7, 0x87, 0xed, 0x22, 0x8a,
     0x94, 0x25, 0x09, 0xbd, 0x98, 0x2f, 0xff, 0x47, 0x8f, 0xa4, 0xeb, 0x85, 0xd2, 0xc2, 0x4a, 0xf3},
    {0x1c, 0x6d, 0xbd, 0xb1, 0x28, 0x25, 0xd6, 0x12, 0x3c, 0x00, 0xe1, 0xc6, 0xa3, 0xfa, 0xa3, 0x28,
     0x41, 0x41, 0xd3, 0x41, 0x3b, 0x3d, 0x7d, 0x2d, 0x42, 0x94, 0x68, 0x3b, 0x24, 0x9e, 0x89, 0xb7,
     0x73, 0x8d, 0xfa, 0x31, 0xba, 0x31, 0x54, 0x41, 0xa9, 0x5f, 0xca, 0x25, 0x20, 0x7d, 0xd0, 0xe9,
     0x40, 0x6a, 0x36, 0xa8, 0xdf, 0x98, 0x65, 0xbb, 0xca, 0xc5, 0xfd, 0x9b, 0xb3, 0xfa, 0x80, 0xdb},
    {0xce, 0xcc, 0x70, 0x10, 0xee, 0x9a, 0xfb, 0x50, 0xd8, 0x92, 0x14, 0x25, 0x6f, 0x67, 0x97, 0xa8,
     0xb9, 0x00, 0x62, 0x3d, 0x2f, 0xfc, 0xb5, 0x97, 0xad, 0xe0, 0xa5, 0x70, 0x1c, 0xa8, 0xde, 0x94,
     0x4a, 0x6c, 0xc3, 0xc1, 0x5e, 0x5f, 0x02, 0x27, 0xed, 0xd1, 0xf5, 0x8c, 0x6e, 0x5a, 0x0f, 0x74,
     0x8f, 0x45, 0xde, 0x84, 0x4e, 0x3b, 0xec, 0x58, 0x68, 0x89, 0x0b, 0x00, 0x71, 0x82, 0xb3, 0xa9},
  };
  for (int i = 0; i < 3; i++) {
    uint8_t* d_m;
    uint8_t* d_g;
    uint8_t* d_hashed_ek;
    uint8_t h_g[64];

    cudaMalloc(&d_m, 32);
    cudaMalloc(&d_hashed_ek, 32);
    cudaMalloc(&d_g, 64);
    cudaMemcpy(d_m, reference_m[i], 32, cudaMemcpyHostToDevice);
    cudaMemcpy(d_hashed_ek, reference_hashed_ek[i], 32, cudaMemcpyHostToDevice);

    test_G_m_ek_hash_kernel<<<1, 128>>>(d_m, d_hashed_ek, d_g);
    cudaMemcpy(h_g, d_g, 64, cudaMemcpyDeviceToHost);

    for (int j = 0; j < 64; j++) {
      EXPECT_EQ(h_g[j], reference_g[i][j]);
    }

    cudaFree(d_m);
    cudaFree(d_g);
    cudaFree(d_hashed_ek);
  }
}

template <const uint8_t k, const uint8_t du, const uint8_t dv>
__global__ void test_J_hash_kernel(const uint8_t z[32], const uint8_t c[32 * (du * k + dv)], uint8_t j[32])
{
  J<k, du, dv>(z, c, j);
}

TEST_F(HashTest, J512)
{
  constexpr uint8_t du = 10;
  constexpr uint8_t dv = 4;
  constexpr uint8_t k = 2;

  uint8_t reference_z_512[32] = {
    0x84, 0x5f, 0x8a, 0xd6, 0x7e, 0xaa, 0xa8, 0x76, 0xf7, 0x95, 0x2f, 0x48, 0x62, 0x83, 0x9b, 0x3c,
    0x1a, 0xce, 0x55, 0xd2, 0x2a, 0x75, 0xd7, 0x9e, 0x13, 0x1a, 0x8c, 0xb7, 0x4f, 0xa3, 0x9e, 0xd8,
  };

  uint8_t reference_c_512[32 * (du * k + dv)] = {
    0xc5, 0x35, 0xe6, 0x5b, 0x3a, 0xa4, 0x99, 0x6d, 0x2d, 0xc3, 0x99, 0x93, 0x3b, 0xa7, 0xd8, 0xaf, 0x4f, 0x4c, 0x69,
    0x2f, 0x85, 0x7e, 0x5b, 0xe3, 0xe3, 0x1c, 0xa5, 0xb4, 0xa7, 0xe9, 0x14, 0x3c, 0xdc, 0x53, 0x33, 0x1b, 0xc2, 0x82,
    0x1a, 0x6b, 0xf8, 0x12, 0x56, 0xc5, 0x3c, 0xa5, 0xf9, 0xa4, 0x13, 0x81, 0x45, 0x56, 0x9b, 0x98, 0x70, 0x2d, 0x11,
    0x23, 0x29, 0x99, 0x52, 0x2d, 0xd1, 0xf9, 0x98, 0xf0, 0xf5, 0xa7, 0x4a, 0x3b, 0x22, 0x20, 0xb7, 0x65, 0xa5, 0xd8,
    0xc2, 0xac, 0x37, 0xeb, 0x9c, 0x1d, 0xaa, 0x8b, 0x72, 0xb7, 0xd3, 0x38, 0xb7, 0x14, 0xc9, 0x0b, 0x8e, 0x62, 0x3d,
    0xf5, 0x25, 0x1c, 0xbd, 0x31, 0xa7, 0x83, 0x36, 0xc4, 0x93, 0xb1, 0x21, 0x41, 0x9b, 0xd7, 0x26, 0x91, 0x48, 0xba,
    0x49, 0x5c, 0x96, 0xe5, 0xf3, 0x39, 0xd2, 0xac, 0x4a, 0x9b, 0xc4, 0x10, 0xcf, 0xbc, 0x41, 0xc4, 0x14, 0xaf, 0xdd,
    0x5e, 0xd3, 0x8e, 0xd2, 0x17, 0xed, 0x6a, 0x74, 0xc0, 0x5b, 0xe1, 0x7e, 0xfd, 0xe1, 0xf2, 0x5e, 0xa4, 0x28, 0xc8,
    0x43, 0x67, 0xed, 0x87, 0x7e, 0x8b, 0xc5, 0x72, 0xf9, 0x4b, 0x5a, 0xbf, 0xd5, 0x7c, 0x37, 0x75, 0x7b, 0x24, 0x71,
    0x2f, 0xab, 0xc7, 0x6b, 0x06, 0xa4, 0x3f, 0x5d, 0x61, 0xe7, 0x36, 0xcc, 0xd8, 0xb1, 0x79, 0x48, 0x46, 0x1a, 0x0b,
    0x5a, 0x42, 0x2f, 0x3f, 0xc7, 0x8d, 0xf1, 0x74, 0x96, 0x35, 0x81, 0xa5, 0x87, 0x87, 0xac, 0x06, 0x9c, 0xf9, 0x3b,
    0x4e, 0x9d, 0xc7, 0x4c, 0x73, 0xa5, 0x83, 0x50, 0xfe, 0xa4, 0xb1, 0x8b, 0x5b, 0xff, 0x92, 0x49, 0x60, 0xac, 0xaf,
    0x73, 0x7d, 0xd9, 0x02, 0x5f, 0x69, 0x74, 0x98, 0x63, 0x3b, 0x87, 0x51, 0xe3, 0x18, 0x09, 0x4e, 0x56, 0x7b, 0x73,
    0x07, 0x63, 0x7d, 0xc0, 0x34, 0x35, 0xf0, 0xd6, 0xf1, 0x11, 0x08, 0x4d, 0x9f, 0x58, 0x24, 0x17, 0x5b, 0x07, 0xc2,
    0x39, 0xf4, 0x24, 0x5e, 0xa0, 0x71, 0xa5, 0x47, 0x0f, 0xd7, 0x53, 0xb0, 0xd0, 0x70, 0x43, 0x08, 0x9f, 0x8b, 0x9b,
    0x94, 0xf0, 0x6d, 0x16, 0x63, 0x78, 0x2a, 0x5d, 0xcd, 0xcd, 0x32, 0xac, 0xe9, 0xe3, 0x2c, 0x32, 0x7d, 0x14, 0x56,
    0xa6, 0xe2, 0x10, 0xa5, 0xa6, 0xc2, 0x35, 0xc8, 0x01, 0x25, 0x29, 0x36, 0xb0, 0xa1, 0x68, 0x8f, 0xea, 0xb7, 0x49,
    0x52, 0x25, 0x1e, 0xca, 0x8d, 0x76, 0xa6, 0x3f, 0x34, 0x02, 0xc9, 0x88, 0x5c, 0x0d, 0x7d, 0x27, 0x70, 0x7b, 0x84,
    0xb2, 0x8b, 0xa8, 0x65, 0xfb, 0x43, 0x3f, 0xc8, 0xde, 0x43, 0xaf, 0xe9, 0x3a, 0x63, 0xb4, 0xa9, 0xf0, 0xd3, 0xb0,
    0xa3, 0x7d, 0x73, 0xe2, 0xea, 0x01, 0xf4, 0xeb, 0xac, 0x03, 0xa7, 0xc3, 0xfa, 0xa1, 0xfe, 0x9d, 0x5a, 0x86, 0xeb,
    0x23, 0x85, 0x29, 0xe6, 0x50, 0x61, 0x64, 0x91, 0xaa, 0xb6, 0x69, 0xf9, 0x00, 0x31, 0x85, 0xd6, 0xdc, 0xe3, 0x69,
    0x71, 0x48, 0x96, 0x27, 0x88, 0xd3, 0x54, 0x7f, 0x4a, 0xbe, 0x6a, 0x9f, 0x6c, 0x0e, 0x81, 0x3a, 0xf0, 0x08, 0x15,
    0x72, 0x3c, 0x7f, 0x3f, 0xb3, 0x20, 0xf8, 0x5f, 0xf9, 0xe2, 0x0c, 0xd8, 0xaa, 0x23, 0xe4, 0x3e, 0x19, 0x5d, 0xc6,
    0xe2, 0x83, 0xab, 0x74, 0x8b, 0x5f, 0xb4, 0x6a, 0xe9, 0x9e, 0x17, 0x29, 0x77, 0x1e, 0xfd, 0x5a, 0xcd, 0x6d, 0xb6,
    0x25, 0x65, 0xa5, 0x39, 0x05, 0xbb, 0x8d, 0x0d, 0x50, 0xfb, 0x9e, 0xcd, 0x26, 0x70, 0x94, 0x19, 0x8f, 0xb7, 0x07,
    0xa1, 0xad, 0xfa, 0xfe, 0x38, 0x6e, 0x22, 0x07, 0xb9, 0xee, 0xa8, 0x47, 0x6e, 0x25, 0xfc, 0xa8, 0xe6, 0x39, 0x37,
    0x9e, 0xb3, 0x96, 0xb5, 0xab, 0x89, 0x24, 0xad, 0xaa, 0x54, 0x84, 0x43, 0x47, 0x0c, 0xd0, 0xb1, 0x1b, 0x1c, 0x0c,
    0x8c, 0x58, 0x29, 0x75, 0xe9, 0xee, 0x0c, 0xd7, 0x72, 0xc6, 0x97, 0xc7, 0xdb, 0x53, 0xad, 0xaf, 0x1d, 0x45, 0xf3,
    0xd4, 0xc6, 0xf1, 0x20, 0x18, 0x3a, 0x4f, 0x4d, 0x05, 0x39, 0xad, 0x3b, 0x5d, 0x3f, 0x2c, 0x4d, 0x60, 0x6f, 0x4c,
    0x7c, 0x9b, 0x3c, 0xa8, 0x14, 0x93, 0x01, 0x3d, 0xa8, 0x54, 0xef, 0x8c, 0x4e, 0x78, 0x26, 0x43, 0x9a, 0xeb, 0xfb,
    0x38, 0x02, 0x6d, 0x51, 0x45, 0x6c, 0xd8, 0x49, 0x84, 0x19, 0x75, 0xa7, 0x80, 0x18, 0xe4, 0xc3, 0x4a, 0x3a, 0x28,
    0x61, 0x9b, 0xe3, 0xdd, 0xe4, 0x84, 0xbe, 0xa7, 0x7d, 0xa4, 0x8e, 0x38, 0xf3, 0xbf, 0x64, 0x6b, 0xc3, 0x75, 0x39,
    0xcc, 0x22, 0xcf, 0x64, 0x3c, 0xe0, 0x70, 0x27, 0x26, 0xfb, 0xd5, 0x39, 0xee, 0xaa, 0x7d, 0xed, 0x44, 0xee, 0xb7,
    0xb2, 0x96, 0xb4, 0x0c, 0xe2, 0x6a, 0x1c, 0x81, 0xa7, 0x41, 0xc8, 0x98, 0xa3, 0xe0, 0x55, 0x69, 0x24, 0x82, 0x8d,
    0x60, 0x3a, 0x1c, 0x30, 0xdc, 0x11, 0x60, 0x56, 0xce, 0x27, 0x40, 0x04, 0x26, 0xd1, 0xd1, 0xff, 0x67, 0x92, 0x69,
    0x8b, 0x5a, 0x13, 0x07, 0xcc, 0x44, 0xd0, 0x32, 0x27, 0x19, 0x00, 0x2b, 0x99, 0x9b, 0x78, 0xcf, 0xf7, 0xc4, 0x4d,
    0x79, 0x07, 0x0e, 0xaa, 0xdb, 0xc2, 0x3b, 0x56, 0x01, 0x70, 0x34, 0x1c, 0x3d, 0x8e, 0x1b, 0xf7, 0xb6, 0x0f, 0xb4,
    0xcd, 0xf0, 0x78, 0x61, 0x3a, 0x8f, 0xa8, 0xb9, 0xd2, 0xcd, 0xdd, 0x7c, 0x40, 0xe7, 0xd6, 0x20, 0x64, 0x0a, 0x1b,
    0xf3, 0x59, 0x67, 0xb3, 0xf0, 0x3f, 0xe9, 0xe5, 0x7b, 0x11, 0xc3, 0xf6, 0xb3, 0x8b, 0xf5, 0xbc, 0x5d, 0xc5, 0x16,
    0x7d, 0xc0, 0x9c, 0x4e, 0x06, 0x15, 0x04, 0xe0, 0x70, 0xac, 0xca, 0x07, 0x7a, 0xb4, 0xd0, 0xdf, 0x7c, 0xd7, 0x5c,
    0xad, 0x24, 0x1e, 0x5a, 0xc3, 0xec, 0x01, 0x2b,
  };

  uint8_t reference_j_512[32] = {
    0xa8, 0xdf, 0x79, 0x9d, 0x4a, 0x8f, 0x7f, 0x4f, 0x41, 0x54, 0x23, 0xf2, 0x23, 0x64, 0xab, 0x88,
    0xf8, 0x53, 0xa3, 0x2c, 0x1a, 0xe1, 0x01, 0xde, 0xd2, 0x7f, 0x72, 0x0e, 0xef, 0x94, 0xbb, 0x10,
  };

  uint8_t* d_z;
  uint8_t* d_c;
  uint8_t* d_j;
  uint8_t h_j[32];

  cudaMalloc(&d_z, 32);
  cudaMalloc(&d_c, 32 * (du * k + dv));
  cudaMalloc(&d_j, 32);

  cudaMemcpy(d_z, reference_z_512, 32, cudaMemcpyHostToDevice);
  cudaMemcpy(d_c, reference_c_512, 32 * (du * k + dv), cudaMemcpyHostToDevice);

  test_J_hash_kernel<k, du, dv><<<1, 128>>>(d_z, d_c, d_j);
  cudaMemcpy(h_j, d_j, 32, cudaMemcpyDeviceToHost);

  for (int i = 0; i < 32; i++) {
    EXPECT_EQ(h_j[i], reference_j_512[i]);
  }

  cudaFree(d_z);
  cudaFree(d_c);
  cudaFree(d_j);
}

TEST_F(HashTest, J768)
{
  constexpr uint8_t du = 10;
  constexpr uint8_t dv = 4;
  constexpr uint8_t k = 3;

  uint8_t reference_z_768[32] = {
    0x1f, 0x8a, 0x28, 0xed, 0xf8, 0x1b, 0xb6, 0x21, 0xb6, 0x90, 0x0c, 0xeb, 0x53, 0x44, 0x84, 0x70,
    0xb3, 0x13, 0x2c, 0x46, 0x3a, 0x47, 0x60, 0xa5, 0xa3, 0x86, 0x30, 0x62, 0x10, 0x64, 0x8b, 0x95,
  };

  uint8_t reference_c_768[1088] = {
    0x63, 0x47, 0x76, 0x9b, 0x52, 0x17, 0x34, 0x97, 0x0c, 0x50, 0x2c, 0x49, 0x80, 0x91, 0xda, 0xdd, 0x91, 0xe3, 0x68,
    0x86, 0x35, 0x64, 0x69, 0xbb, 0xb2, 0xa9, 0x02, 0x2c, 0x3b, 0x01, 0xdb, 0x52, 0x4d, 0x57, 0x45, 0x55, 0xdb, 0xc3,
    0x92, 0x45, 0x14, 0x1b, 0xfc, 0x72, 0xeb, 0x34, 0xbd, 0x5f, 0x71, 0xd2, 0x2a, 0x3e, 0x51, 0x88, 0xa4, 0xae, 0xec,
    0xdd, 0xb3, 0xaf, 0x42, 0x59, 0x23, 0x0c, 0xb4, 0xdf, 0x36, 0xfc, 0x5e, 0xf7, 0x15, 0x06, 0xd3, 0xe9, 0xc2, 0xf2,
    0x39, 0x5f, 0x0e, 0x42, 0x17, 0x77, 0x47, 0x61, 0x6b, 0xba, 0xbe, 0x9f, 0x21, 0x16, 0x0f, 0x1c, 0x22, 0x2b, 0xde,
    0xcb, 0xe6, 0x3f, 0xbc, 0x1f, 0x41, 0x34, 0x85, 0x9f, 0xc3, 0xef, 0x6f, 0x7d, 0x87, 0x59, 0xa7, 0xd1, 0x34, 0x05,
    0xe7, 0x83, 0x9c, 0xe3, 0x62, 0x82, 0x91, 0xd4, 0xa7, 0x01, 0xc8, 0x51, 0x3b, 0x07, 0x9e, 0xb6, 0x84, 0xf7, 0x43,
    0x7f, 0x45, 0x7c, 0xe4, 0xb0, 0x61, 0xed, 0x1e, 0xf9, 0x8c, 0x94, 0x3b, 0x17, 0xae, 0x5c, 0x16, 0xec, 0x99, 0x17,
    0x2c, 0x98, 0x53, 0x8a, 0x3f, 0xf0, 0xf4, 0xeb, 0xfb, 0x5b, 0x91, 0xf2, 0x70, 0x37, 0xce, 0x38, 0x7a, 0x7e, 0xbc,
    0xc2, 0x65, 0x8a, 0x5e, 0x19, 0x4d, 0x8e, 0xeb, 0x07, 0xb8, 0x79, 0xc1, 0x96, 0x16, 0x5b, 0x5b, 0x8b, 0x5d, 0xa6,
    0xf3, 0xa6, 0x83, 0xe4, 0xa3, 0xb2, 0x7b, 0x36, 0x5d, 0x25, 0x2c, 0x0d, 0xbc, 0x6c, 0x76, 0x9c, 0x43, 0x28, 0x30,
    0x1b, 0xf0, 0x05, 0x4c, 0x81, 0x1e, 0x8f, 0xda, 0xde, 0x05, 0xc8, 0xe9, 0x3d, 0x00, 0x8a, 0x4c, 0x67, 0xc8, 0xaf,
    0x59, 0xb5, 0x1f, 0x5e, 0x90, 0x3d, 0xf5, 0xd8, 0x7c, 0xc5, 0xdc, 0x54, 0xd1, 0x70, 0xff, 0x9b, 0x81, 0x34, 0x23,
    0x7a, 0xf7, 0xd4, 0x56, 0x95, 0x3b, 0x5d, 0x46, 0xa5, 0x97, 0xbb, 0x18, 0xc8, 0x73, 0xe0, 0x4e, 0xdd, 0x67, 0x80,
    0x87, 0x7d, 0xa5, 0x64, 0x10, 0x69, 0xf3, 0xd3, 0x88, 0xf9, 0xa0, 0x28, 0x5b, 0x9d, 0x26, 0xe7, 0x18, 0xec, 0xc2,
    0x41, 0x82, 0xc3, 0x51, 0xb5, 0x87, 0xd8, 0x3a, 0x76, 0xff, 0x5f, 0xa7, 0x8b, 0x12, 0x29, 0xa9, 0x10, 0x9b, 0x60,
    0x40, 0xaf, 0xd2, 0x5a, 0x9e, 0xef, 0x7f, 0xfc, 0xac, 0xf3, 0xfd, 0xcb, 0x1c, 0xd2, 0x4e, 0xde, 0x3c, 0x9f, 0x2d,
    0x5b, 0x44, 0xb7, 0x85, 0x25, 0xc6, 0x7f, 0x8e, 0xf8, 0x2b, 0xeb, 0x5c, 0x33, 0x70, 0x3b, 0xa3, 0xdd, 0xd3, 0xc2,
    0x1b, 0xc3, 0x38, 0xa3, 0x16, 0xfa, 0x7f, 0x66, 0xe1, 0x2f, 0x30, 0xac, 0x39, 0xeb, 0x96, 0xba, 0xf6, 0xc0, 0x42,
    0x93, 0x35, 0x23, 0xf8, 0x2d, 0x7b, 0x71, 0xc8, 0x17, 0x9b, 0xb6, 0x33, 0xb2, 0x77, 0xa5, 0xec, 0x1a, 0x7f, 0x0b,
    0xe2, 0x8d, 0xe0, 0x52, 0xe3, 0x24, 0xb7, 0x8e, 0xed, 0x44, 0x01, 0x15, 0xef, 0x66, 0x12, 0x11, 0x8b, 0x8d, 0xe5,
    0x54, 0xa8, 0xd1, 0x97, 0xdf, 0x4d, 0xb5, 0xb1, 0x17, 0x7a, 0xf3, 0xc5, 0x90, 0xb5, 0xff, 0x47, 0x5f, 0xcb, 0xf7,
    0x81, 0xcb, 0xfc, 0x99, 0x56, 0xf8, 0xb7, 0x35, 0xa4, 0xf2, 0x5d, 0x11, 0x30, 0x9c, 0x0a, 0x80, 0x69, 0xc4, 0x07,
    0x7b, 0xf7, 0x7d, 0xd4, 0x34, 0x61, 0xa4, 0xac, 0x58, 0xa7, 0x45, 0x2c, 0x26, 0x57, 0x69, 0xd5, 0xca, 0xf4, 0x6b,
    0x4d, 0xba, 0xb0, 0x3e, 0xb8, 0xc0, 0x57, 0xb1, 0x6f, 0x3f, 0x9f, 0x6d, 0xf6, 0x61, 0xa2, 0xb8, 0xa6, 0x25, 0xf0,
    0xa9, 0x5c, 0x55, 0xed, 0xae, 0x10, 0x05, 0x3e, 0x6a, 0x05, 0x77, 0x8a, 0x11, 0x03, 0x81, 0x57, 0x0a, 0x4e, 0xf3,
    0xa5, 0xd9, 0x13, 0x88, 0x18, 0xbd, 0x51, 0x68, 0xbb, 0x87, 0x30, 0xeb, 0xaf, 0x85, 0x17, 0x75, 0xc3, 0x0d, 0x90,
    0x38, 0x93, 0xab, 0xba, 0x07, 0xe5, 0xad, 0xc3, 0xcc, 0x4a, 0x9f, 0x5e, 0xb4, 0xe2, 0x76, 0xd8, 0x9c, 0xf1, 0x68,
    0x85, 0x59, 0x77, 0xec, 0x88, 0x80, 0x86, 0x67, 0x66, 0x7c, 0x6e, 0xb9, 0xa6, 0x9d, 0xd9, 0xa5, 0x20, 0xf8, 0x9b,
    0x4c, 0x68, 0x92, 0x27, 0x39, 0x18, 0x41, 0x5d, 0x73, 0x6f, 0xb2, 0x9d, 0x0c, 0x17, 0xf1, 0xfe, 0x3a, 0x8a, 0x41,
    0x42, 0x59, 0x1f, 0x46, 0xf8, 0x2d, 0xee, 0xed, 0xe4, 0xb9, 0xb0, 0xb6, 0x10, 0xe4, 0x97, 0xcd, 0x6c, 0xa9, 0x69,
    0x91, 0x64, 0x4d, 0xe1, 0xd6, 0x8e, 0x40, 0xdc, 0x35, 0xa9, 0x81, 0x7f, 0x74, 0x4f, 0x1e, 0xe1, 0x97, 0xd0, 0xaa,
    0x0b, 0xd2, 0xe5, 0x64, 0x33, 0xa4, 0x33, 0xe2, 0x30, 0x03, 0x99, 0x55, 0xac, 0x8d, 0x43, 0x11, 0x79, 0x04, 0x2c,
    0x0d, 0xc1, 0x18, 0xe2, 0x98, 0x12, 0xa4, 0x99, 0xad, 0x47, 0x82, 0xfc, 0xd4, 0xda, 0x79, 0xdf, 0xcb, 0x09, 0xe5,
    0x40, 0xf5, 0x6e, 0x1f, 0x12, 0xc4, 0x6a, 0xdf, 0x45, 0xd8, 0x48, 0xe3, 0x3b, 0x9f, 0xfd, 0x0b, 0xcf, 0x59, 0x3f,
    0xaf, 0xed, 0x62, 0xf9, 0x24, 0x88, 0x90, 0xb1, 0x44, 0x84, 0x2a, 0xe9, 0x3e, 0xa9, 0x03, 0xc0, 0x54, 0x10, 0xbf,
    0x96, 0xbb, 0x26, 0xa8, 0xae, 0x02, 0x02, 0xb5, 0x40, 0x2d, 0xe9, 0xdd, 0xdd, 0x76, 0x4d, 0x46, 0xe7, 0x86, 0xd2,
    0xf9, 0x88, 0x5a, 0x5d, 0xc1, 0x63, 0x4a, 0x2f, 0x98, 0x8c, 0x85, 0x00, 0x12, 0x76, 0xc1, 0x09, 0xc8, 0x91, 0x6b,
    0xeb, 0x3c, 0x73, 0x6d, 0xad, 0xa3, 0x2a, 0x69, 0x6e, 0x74, 0x4c, 0xc4, 0x2d, 0x65, 0x89, 0x41, 0x6a, 0x3b, 0x35,
    0x91, 0xe6, 0x38, 0x63, 0xe2, 0xa1, 0x06, 0xa3, 0x22, 0x66, 0x7c, 0xf2, 0x31, 0x45, 0x83, 0xe8, 0x37, 0x31, 0x65,
    0xca, 0x14, 0x34, 0xda, 0xd2, 0xdc, 0xc6, 0x55, 0xe8, 0x88, 0x39, 0x11, 0x8d, 0x9b, 0x49, 0x59, 0x9f, 0x5c, 0xf3,
    0x15, 0x99, 0xec, 0xb2, 0xf2, 0x00, 0x67, 0x53, 0x9b, 0xce, 0xdf, 0x86, 0x35, 0xa8, 0x6f, 0x8f, 0x36, 0xd4, 0x82,
    0xad, 0x05, 0xdc, 0x38, 0x88, 0x6b, 0x92, 0x31, 0x1d, 0x38, 0xf8, 0xd1, 0x84, 0xa4, 0x9c, 0x56, 0x1e, 0x2f, 0x10,
    0xd6, 0x4a, 0xe3, 0x9b, 0x6a, 0x20, 0xf5, 0x23, 0xf1, 0x7e, 0xb9, 0x0c, 0xc4, 0x92, 0x29, 0x37, 0x47, 0x6e, 0xf3,
    0x2c, 0x2b, 0x7b, 0xe8, 0xbb, 0x0f, 0x62, 0x78, 0x2c, 0x57, 0xa6, 0x83, 0x8c, 0x0e, 0x39, 0x1a, 0xba, 0x65, 0x3b,
    0x6c, 0xef, 0x4a, 0xd3, 0xad, 0x77, 0xa0, 0xc2, 0xf0, 0xeb, 0xd2, 0x67, 0x17, 0xcb, 0x27, 0x95, 0xcd, 0x0c, 0xc1,
    0xcd, 0x31, 0xab, 0x36, 0x74, 0x24, 0xde, 0xc9, 0xb9, 0x34, 0xf6, 0x0c, 0xdf, 0x77, 0x43, 0x21, 0x33, 0x78, 0x78,
    0xaa, 0x98, 0xde, 0xd4, 0x75, 0x31, 0xd5, 0xc1, 0xe3, 0xe9, 0x59, 0xb2, 0x91, 0xe2, 0xdd, 0x85, 0x17, 0x02, 0x55,
    0xb9, 0x8b, 0xfc, 0x64, 0xbd, 0x12, 0xca, 0x26, 0x80, 0xa9, 0xc0, 0x48, 0x2c, 0xb0, 0x4c, 0x80, 0x23, 0x30, 0xb8,
    0x1f, 0x5f, 0x8a, 0x83, 0xd5, 0x82, 0x73, 0x64, 0x27, 0xad, 0x0c, 0x47, 0x21, 0xc5, 0x6c, 0xbe, 0xc9, 0x3a, 0x5f,
    0x65, 0xba, 0x2e, 0x82, 0x6e, 0x3b, 0x6b, 0xb0, 0xbf, 0x15, 0x56, 0x91, 0x4e, 0xed, 0x53, 0xf6, 0x6d, 0x1d, 0x12,
    0x4e, 0xd4, 0xed, 0x02, 0x3d, 0x19, 0xd3, 0xff, 0x9e, 0x74, 0x3d, 0xa5, 0xa0, 0x3e, 0xf5, 0xcd, 0x8f, 0x55, 0xa8,
    0xff, 0xff, 0x83, 0xf5, 0x85, 0x74, 0x84, 0x90, 0x09, 0xb9, 0x9c, 0x30, 0x7d, 0xce, 0xe7, 0x3d, 0xf9, 0x8d, 0x4d,
    0x08, 0x99, 0xab, 0xcd, 0xed, 0x60, 0xf4, 0x76, 0xf7, 0x62, 0xee, 0xd0, 0x56, 0xf3, 0x95, 0x49, 0xab, 0x2c, 0x9b,
    0xf2, 0x6c, 0x3b, 0x2f, 0x0c, 0xad, 0x5e, 0xf0, 0x8f, 0x58, 0xf3, 0x8c, 0xbb, 0x30, 0xe7, 0xe6, 0xa1, 0xc7, 0x45,
    0x0e, 0x21, 0x21, 0x69, 0x8a, 0x81, 0x32, 0x57, 0x8f, 0xe8, 0x66, 0x55, 0x00, 0xad, 0x27, 0x82, 0x01, 0x0d, 0xdf,
    0x17, 0x7b, 0xd7, 0xa2, 0x76, 0xf6, 0x70, 0x0d, 0x7b, 0xf7, 0x45, 0x9b, 0x90, 0xe1, 0x84, 0x06, 0x34, 0xd6, 0x12,
    0x86, 0x6c, 0xe0, 0x2a, 0xe5,
  };

  uint8_t reference_j_768[32] = {
    0x33, 0x97, 0xca, 0x3a, 0x4b, 0x3b, 0x30, 0xc0, 0xc4, 0x58, 0xb0, 0x4c, 0xdc, 0xaa, 0x10, 0xcb,
    0x14, 0x4c, 0xbe, 0x63, 0x75, 0x98, 0xec, 0x3c, 0xd2, 0xbd, 0x4c, 0x02, 0x8a, 0xc9, 0xcd, 0x79,
  };

  uint8_t* d_z;
  uint8_t* d_c;
  uint8_t* d_j;
  uint8_t h_j[32];

  cudaMalloc(&d_z, 32);
  cudaMalloc(&d_c, 32 * (du * k + dv));
  cudaMalloc(&d_j, 32);

  cudaMemcpy(d_z, reference_z_768, 32, cudaMemcpyHostToDevice);
  cudaMemcpy(d_c, reference_c_768, 32 * (du * k + dv), cudaMemcpyHostToDevice);

  test_J_hash_kernel<k, du, dv><<<1, 128>>>(d_z, d_c, d_j);
  cudaMemcpy(h_j, d_j, 32, cudaMemcpyDeviceToHost);

  for (int i = 0; i < 32; i++) {
    EXPECT_EQ(h_j[i], reference_j_768[i]);
  }

  cudaFree(d_z);
  cudaFree(d_c);
  cudaFree(d_j);
}

TEST_F(HashTest, J1024)
{
  constexpr uint8_t du = 11;
  constexpr uint8_t dv = 5;
  constexpr uint8_t k = 4;

  uint8_t reference_z_1024[32] = {
    0x6e, 0x60, 0xe3, 0xb8, 0x17, 0x42, 0x21, 0xe2, 0x41, 0xfb, 0x6a, 0x48, 0x07, 0x58, 0x3f, 0x55,
    0x3f, 0x0b, 0x7f, 0x15, 0x09, 0x8e, 0x7a, 0xc5, 0x38, 0x92, 0x37, 0xee, 0x78, 0x1d, 0xa9, 0xe0,
  };

  uint8_t reference_c_1024[1568] = {
    0xdf, 0xc9, 0x6f, 0x3d, 0x13, 0x2a, 0x7c, 0x92, 0x79, 0xe4, 0xb5, 0xf1, 0x90, 0x96, 0x6a, 0x6b, 0x7a, 0x30, 0x1d,
    0xc1, 0x20, 0xaa, 0x4f, 0x80, 0xea, 0x87, 0x3d, 0x02, 0x35, 0xd2, 0xe1, 0x32, 0xfb, 0xde, 0x76, 0x5a, 0x3f, 0x2e,
    0x85, 0x71, 0x84, 0x95, 0xf3, 0xe0, 0x33, 0x0e, 0xd9, 0x56, 0x41, 0x3c, 0x90, 0xfe, 0x90, 0x99, 0x3d, 0xb1, 0x8c,
    0xa6, 0xe9, 0xc5, 0x4b, 0x33, 0xe8, 0xf9, 0xf3, 0x49, 0xa7, 0x3f, 0x9a, 0x1f, 0x4e, 0x8a, 0x29, 0xd4, 0x61, 0x5c,
    0xd5, 0x48, 0x2a, 0xa5, 0x78, 0xfe, 0x57, 0x6c, 0xae, 0x86, 0x96, 0xa0, 0x5b, 0x43, 0x22, 0xe9, 0xf0, 0x53, 0x7f,
    0x71, 0x8e, 0xb7, 0x84, 0xcd, 0xbc, 0x56, 0x54, 0x43, 0x42, 0xc0, 0x62, 0x04, 0xce, 0xd3, 0x8e, 0x64, 0xe0, 0x63,
    0x98, 0x70, 0x2f, 0x85, 0x51, 0xb9, 0x92, 0xf5, 0x63, 0x08, 0x55, 0x01, 0x9b, 0x15, 0x4c, 0x80, 0xf4, 0x26, 0x77,
    0xd9, 0x8c, 0x31, 0x27, 0x67, 0x4a, 0x16, 0xcf, 0xeb, 0xe0, 0x40, 0x4b, 0x26, 0x84, 0xf6, 0x86, 0x1a, 0xb4, 0x81,
    0x71, 0x54, 0x14, 0x54, 0xd3, 0x98, 0x7e, 0x9f, 0xfd, 0x23, 0xa3, 0x6d, 0xd1, 0xbb, 0x8d, 0xb1, 0x43, 0xeb, 0x91,
    0x52, 0x21, 0x6f, 0xf2, 0x17, 0x41, 0x6e, 0xc6, 0x35, 0x18, 0x60, 0xcd, 0x6f, 0x75, 0x7a, 0xc6, 0x6b, 0x71, 0xd8,
    0xea, 0x7b, 0x04, 0xcd, 0x43, 0x7f, 0xd3, 0x30, 0x0f, 0x54, 0x61, 0x8c, 0xc8, 0xa7, 0x27, 0x7e, 0xfb, 0xfa, 0xc5,
    0x51, 0x26, 0xc2, 0x52, 0x3f, 0x53, 0x56, 0x19, 0x14, 0xed, 0x60, 0x06, 0x95, 0xa0, 0x1b, 0x4a, 0xd4, 0x45, 0x0e,
    0xdc, 0x0c, 0x61, 0x22, 0xca, 0x8a, 0x97, 0xa9, 0x9e, 0xc4, 0xb5, 0x9e, 0x03, 0xaa, 0xc8, 0x9e, 0x79, 0x0c, 0xef,
    0x35, 0xdc, 0x65, 0x50, 0x5d, 0xe3, 0x84, 0xfb, 0x93, 0x22, 0x4c, 0x3e, 0x4c, 0xf6, 0x34, 0x98, 0xd1, 0xda, 0x8c,
    0x88, 0x56, 0xb2, 0xd3, 0x48, 0xdc, 0x6c, 0x98, 0xe0, 0x80, 0xf9, 0xc6, 0xad, 0x00, 0xbc, 0xad, 0x49, 0xd9, 0x49,
    0x68, 0xab, 0xed, 0x29, 0x80, 0xe5, 0xf5, 0x78, 0xeb, 0x19, 0x06, 0xd6, 0xb9, 0xbd, 0x5e, 0xdb, 0x31, 0x2c, 0xa2,
    0x1f, 0x9b, 0x18, 0xca, 0x49, 0x17, 0xcc, 0x4d, 0xa3, 0x71, 0xf2, 0xd0, 0x74, 0x44, 0x43, 0x33, 0x6c, 0xd8, 0x95,
    0xc8, 0xee, 0x00, 0x21, 0xd2, 0x02, 0x44, 0x80, 0xcc, 0xa7, 0xb3, 0xe5, 0xc2, 0xd2, 0x0a, 0xcd, 0xc6, 0x48, 0x2a,
    0xe5, 0x1d, 0xa5, 0x81, 0xe3, 0x51, 0xca, 0xc1, 0x22, 0x1f, 0xe2, 0xa9, 0x6a, 0xdc, 0x05, 0xcc, 0x43, 0x3e, 0x88,
    0x1e, 0x4f, 0x52, 0xa4, 0x8b, 0xe4, 0x68, 0xbc, 0x53, 0x10, 0xef, 0xb5, 0x2c, 0x70, 0x43, 0xfa, 0x07, 0x13, 0x25,
    0x36, 0xd2, 0x1a, 0x27, 0x23, 0x32, 0x80, 0xa2, 0x3a, 0xb9, 0xac, 0x07, 0xda, 0xd4, 0x4c, 0x46, 0xc2, 0x60, 0x77,
    0x22, 0x15, 0x5f, 0x81, 0xf7, 0xcf, 0xd9, 0x2f, 0x63, 0x79, 0xaf, 0x11, 0xb0, 0x8d, 0xe7, 0xdb, 0x87, 0xa7, 0x42,
    0xa3, 0xcf, 0xe8, 0xfa, 0x7b, 0x22, 0x2d, 0x1f, 0xe9, 0x83, 0xe6, 0x5e, 0x99, 0x03, 0x14, 0xc3, 0x81, 0xc7, 0xc5,
    0x7a, 0xf5, 0x5e, 0xf9, 0x90, 0x96, 0x26, 0x76, 0x5d, 0xc6, 0x61, 0x01, 0xef, 0xf2, 0xf3, 0xf8, 0x8b, 0xfa, 0xbc,
    0xaa, 0xb1, 0xca, 0x9a, 0x84, 0x33, 0xfd, 0xbf, 0x50, 0x2c, 0x1c, 0xd0, 0x71, 0x39, 0x0d, 0x24, 0xf0, 0xca, 0x06,
    0x5d, 0x1c, 0x70, 0x55, 0xf1, 0xd7, 0x50, 0x3c, 0x80, 0xac, 0x77, 0xfe, 0x3b, 0xed, 0x33, 0xc5, 0x18, 0x38, 0x74,
    0x1f, 0x7a, 0xc1, 0x95, 0xcd, 0xaf, 0x06, 0x5a, 0x74, 0x5a, 0xcf, 0x79, 0xab, 0x39, 0x26, 0xee, 0x0e, 0xa9, 0xc6,
    0x36, 0xa9, 0xea, 0xd0, 0x21, 0xbf, 0xc9, 0x53, 0x52, 0x49, 0xfc, 0x6e, 0xa9, 0x60, 0x76, 0x9b, 0x8f, 0x06, 0x73,
    0x3c, 0xab, 0x67, 0x26, 0x09, 0xaf, 0x65, 0xc2, 0x17, 0xcc, 0xa1, 0x55, 0xba, 0x5c, 0x89, 0x45, 0xfd, 0x3c, 0x7f,
    0xea, 0x26, 0x1d, 0x55, 0xe1, 0xcc, 0x43, 0xcb, 0x74, 0x10, 0xe6, 0x9e, 0xf8, 0xf3, 0x2c, 0x89, 0x00, 0xe9, 0x35,
    0x68, 0x40, 0x42, 0xad, 0x72, 0x69, 0x6b, 0x22, 0x88, 0xee, 0xb1, 0xa7, 0x20, 0x9e, 0xd2, 0x1a, 0xe0, 0xd8, 0xce,
    0x0e, 0x9d, 0xca, 0x1f, 0x37, 0xda, 0xcd, 0xab, 0x40, 0x4a, 0x42, 0xfc, 0x06, 0x1f, 0x16, 0x00, 0x85, 0x1b, 0x84,
    0x59, 0xcd, 0x0e, 0xb4, 0x61, 0x91, 0x49, 0xba, 0xa3, 0x74, 0xd6, 0xa4, 0x21, 0xc1, 0x5e, 0xd2, 0xb2, 0x95, 0x15,
    0x04, 0xc8, 0xaf, 0xd2, 0x40, 0x96, 0x63, 0x54, 0x00, 0xaf, 0x1a, 0xda, 0xf2, 0x29, 0x67, 0x53, 0x3f, 0xf5, 0x7c,
    0x54, 0x74, 0xb3, 0xa3, 0x0a, 0x54, 0x12, 0x30, 0xaf, 0x59, 0x9f, 0x3e, 0x3b, 0x09, 0x2c, 0xd4, 0xd7, 0xf7, 0x09,
    0xab, 0x2a, 0x28, 0xdb, 0x82, 0x37, 0x18, 0xb3, 0xe8, 0x98, 0xf3, 0x34, 0xe7, 0x6c, 0xce, 0x40, 0x1f, 0xf2, 0xe4,
    0x06, 0x96, 0x2b, 0xd2, 0x1c, 0x6d, 0xa2, 0xaf, 0x34, 0xd1, 0x37, 0x76, 0xda, 0x2b, 0x3e, 0xe7, 0x9d, 0x78, 0xfa,
    0x07, 0x97, 0x7c, 0x66, 0x82, 0x31, 0x38, 0xd0, 0xb7, 0xa7, 0x65, 0x74, 0xba, 0xd3, 0xfd, 0xb2, 0xd4, 0x5f, 0xe7,
    0x94, 0x3e, 0xc8, 0xb9, 0xe5, 0x12, 0xc6, 0xa2, 0xf5, 0xb7, 0x08, 0xe8, 0xad, 0x0a, 0x33, 0x9e, 0xa8, 0x52, 0xba,
    0x19, 0x93, 0x22, 0xbd, 0x89, 0x6b, 0x76, 0xa7, 0xc2, 0xc6, 0xbd, 0x9a, 0x21, 0x7b, 0x2a, 0xd0, 0x08, 0x2b, 0xd5,
    0x40, 0x73, 0x40, 0xb4, 0xf8, 0x88, 0xec, 0x5b, 0x53, 0x7b, 0x4f, 0x80, 0x15, 0x9d, 0x39, 0xeb, 0x98, 0x2c, 0x28,
    0x61, 0xb5, 0x56, 0xfd, 0x15, 0x4e, 0xa5, 0x04, 0x1f, 0x0c, 0x0d, 0x46, 0x68, 0x54, 0xe2, 0xcb, 0x50, 0x51, 0xa3,
    0xc5, 0xb2, 0x7d, 0x0e, 0x69, 0xa6, 0x9d, 0x80, 0xda, 0xd1, 0x0e, 0x58, 0xeb, 0x71, 0x58, 0x48, 0xd8, 0xa5, 0xeb,
    0xad, 0x04, 0x4c, 0x19, 0x53, 0xaa, 0x5a, 0xbd, 0xae, 0xa2, 0x78, 0x37, 0x47, 0x2c, 0x38, 0xd9, 0x40, 0xf4, 0x54,
    0xe1, 0x57, 0xe1, 0x97, 0x31, 0x03, 0xe7, 0x3f, 0x68, 0xcd, 0x65, 0xc0, 0x0e, 0x73, 0x9d, 0x0d, 0xaa, 0x1f, 0x27,
    0x46, 0xfa, 0x96, 0xe3, 0x7c, 0x56, 0xd3, 0xe8, 0x7c, 0x57, 0xd9, 0x8d, 0xfc, 0x24, 0xbd, 0x4b, 0xd9, 0x2a, 0x84,
    0x31, 0xab, 0x5d, 0x86, 0x28, 0x93, 0x17, 0x4d, 0x24, 0xe8, 0x46, 0xc9, 0xff, 0x50, 0x80, 0x0f, 0xad, 0xca, 0x0f,
    0xf8, 0x63, 0x24, 0x12, 0x35, 0xa7, 0x87, 0x20, 0x4c, 0x71, 0xe6, 0x11, 0xd1, 0xbf, 0x3d, 0x13, 0x99, 0x6a, 0xaa,
    0x8c, 0x1b, 0x0d, 0x9e, 0xcd, 0x9a, 0xf6, 0x49, 0xf6, 0x4a, 0x6d, 0x99, 0xd3, 0x47, 0x16, 0xfa, 0x53, 0x89, 0x6d,
    0xb5, 0x39, 0x0f, 0x07, 0x74, 0x89, 0x1e, 0xdc, 0x84, 0x55, 0xb0, 0x70, 0xf0, 0xca, 0xe2, 0x2c, 0x5a, 0x1f, 0x61,
    0xa7, 0xe8, 0x90, 0xd9, 0x24, 0x60, 0xff, 0x47, 0x9b, 0x52, 0x29, 0x2f, 0x24, 0xc8, 0x4a, 0x5a, 0x36, 0x01, 0xcb,
    0x9f, 0xa4, 0x02, 0xac, 0x09, 0xae, 0x84, 0xf9, 0x86, 0xfd, 0x81, 0x78, 0x42, 0xfe, 0x10, 0x93, 0x4f, 0x3c, 0xbd,
    0xf5, 0x43, 0x9a, 0xa1, 0xb2, 0x27, 0x71, 0x7c, 0x68, 0x2e, 0x21, 0xef, 0xf4, 0xdd, 0x5a, 0x4f, 0x83, 0x0d, 0x2e,
    0x46, 0xcf, 0x23, 0xe5, 0x40, 0xf4, 0x29, 0x9f, 0x41, 0xe1, 0x6c, 0xa9, 0x99, 0xbe, 0xf8, 0x23, 0x9c, 0x8b, 0xb2,
    0xef, 0x1d, 0x1c, 0x46, 0x1a, 0xc9, 0x52, 0x3b, 0x38, 0x1f, 0x25, 0xbc, 0x9f, 0x4f, 0x08, 0x0f, 0xe7, 0x9f, 0x32,
    0xef, 0x3c, 0x6f, 0x39, 0xe4, 0xd0, 0x95, 0x08, 0x37, 0x31, 0xfd, 0x9f, 0x7f, 0x65, 0xac, 0xff, 0x18, 0xdb, 0x77,
    0x87, 0x7c, 0x55, 0x9a, 0xc2, 0x86, 0x17, 0x94, 0xdf, 0x33, 0xd8, 0x84, 0x21, 0xb1, 0x75, 0x0c, 0x37, 0x0b, 0xa8,
    0x9f, 0x30, 0xc3, 0xe8, 0xea, 0x5f, 0x68, 0x38, 0xef, 0x5b, 0x68, 0x84, 0x51, 0xc2, 0xd4, 0x85, 0x7c, 0xed, 0x86,
    0x7c, 0xa3, 0x38, 0xad, 0x6d, 0xf2, 0x97, 0x50, 0x41, 0x70, 0x67, 0xe5, 0x41, 0xa0, 0x16, 0x41, 0x77, 0xeb, 0x29,
    0x04, 0xc4, 0xea, 0x21, 0x9a, 0x6b, 0x83, 0xba, 0x91, 0x0e, 0x68, 0x94, 0x2d, 0x83, 0xde, 0xa3, 0xf4, 0x92, 0x55,
    0x58, 0xb6, 0x62, 0xb1, 0xdf, 0x16, 0x15, 0x9f, 0x3d, 0xb9, 0x77, 0x71, 0xa0, 0x2b, 0x44, 0x60, 0xd0, 0xe8, 0x2a,
    0xb6, 0x71, 0x69, 0x6c, 0x6a, 0xd9, 0xb7, 0x2d, 0xe1, 0x6e, 0x0c, 0x90, 0x42, 0xae, 0xb8, 0xf4, 0x69, 0x79, 0xaa,
    0xcf, 0xe8, 0x39, 0x72, 0x73, 0x91, 0x44, 0xda, 0x5f, 0x16, 0x7d, 0x1d, 0x39, 0xc6, 0x1e, 0x34, 0xa9, 0x6f, 0xf5,
    0x83, 0x2c, 0xd9, 0xde, 0x80, 0xd7, 0x9a, 0x54, 0xb1, 0x51, 0xbe, 0xb4, 0x35, 0x6b, 0x0e, 0x50, 0x69, 0x1f, 0x26,
    0xed, 0x6e, 0x84, 0x65, 0x5a, 0x45, 0x93, 0x15, 0x38, 0xc4, 0xca, 0xa9, 0x17, 0x49, 0x3a, 0x40, 0x39, 0x72, 0xb7,
    0x21, 0x89, 0x10, 0x54, 0x00, 0x5f, 0x16, 0x1c, 0x90, 0x98, 0x2b, 0xf4, 0x34, 0xc4, 0x6d, 0xad, 0xf4, 0x2c, 0xf2,
    0xe9, 0xbf, 0xf5, 0xec, 0xba, 0xeb, 0x48, 0xf0, 0xc2, 0x4b, 0x8e, 0x2b, 0xe6, 0x78, 0x39, 0x74, 0xb6, 0x00, 0x9e,
    0x56, 0xa3, 0xab, 0x51, 0xbf, 0x8b, 0xb9, 0xc4, 0xd6, 0xba, 0x5d, 0x5f, 0x0f, 0x9c, 0xa0, 0xb4, 0x5b, 0x1a, 0x50,
    0x28, 0xdd, 0xfe, 0x15, 0x69, 0xf2, 0x1a, 0x50, 0x40, 0x1f, 0xad, 0xa9, 0x46, 0x30, 0x17, 0x9a, 0x10, 0x85, 0x90,
    0x1c, 0x90, 0x76, 0xc9, 0xd9, 0xd7, 0x7f, 0x25, 0xd5, 0xf7, 0x3c, 0x74, 0xe5, 0x86, 0x20, 0xe8, 0x22, 0x16, 0x2b,
    0x3d, 0xfa, 0x5e, 0xf4, 0x7f, 0xdd, 0x7a, 0xb5, 0xc0, 0xcb, 0x3b, 0xf2, 0x91, 0xc7, 0xe2, 0xbe, 0x43, 0x30, 0xc4,
    0xd1, 0x7e, 0x47, 0x31, 0x9e, 0xcf, 0x14, 0x50, 0x9b, 0xaa, 0xf5, 0xb4, 0x36, 0xaf, 0x94, 0xb5, 0xd0, 0x4b, 0xf3,
    0x78, 0xa9, 0x7a, 0xe5, 0x7f, 0x7b, 0xcf, 0x68, 0x2c, 0xa1, 0x3a, 0xfc, 0x7d, 0xbb, 0xb9, 0x2a, 0xa3, 0x5c, 0x6a,
    0xae, 0x65, 0xa4, 0x53, 0x0a, 0x0a, 0xca, 0x90, 0x9d, 0x5a, 0xc3, 0x22, 0x70, 0x3c, 0xa4, 0x29, 0xe1, 0x7c, 0x74,
    0x6b, 0xa1, 0x3e, 0x58, 0xdc, 0x18, 0xe3, 0x4f, 0x1d, 0x22, 0x00, 0x8b, 0xb3, 0x07, 0xef, 0xad, 0xfb, 0x8d, 0xfc,
    0xe6, 0x91, 0x70, 0x2d, 0x89, 0x24, 0xca, 0x5e, 0x2f, 0xf1, 0xbf, 0x42, 0x81, 0x40, 0xc3, 0xcf, 0x42, 0x3a, 0xcc,
    0xa5, 0x3c, 0x0b, 0x6c, 0x5c, 0xb5, 0xca, 0xfb, 0xc5, 0xf6, 0x46, 0x3a, 0xe1, 0x25, 0x4a, 0x34, 0xf5, 0x1e, 0xfc,
    0x9d, 0x79, 0x4a, 0xa2, 0x70, 0xab, 0x51, 0x12, 0x5c, 0x32, 0xa6, 0xf6, 0x53, 0x10, 0x04, 0x84, 0x38, 0x16, 0xb7,
    0x7f, 0x3c, 0x44, 0xd8, 0x7c, 0xa7, 0x79, 0x61, 0x52, 0xfe, 0xae, 0x1c, 0xe7, 0x6b, 0x97, 0x4d, 0x1a, 0x7b, 0xa2,
    0x86, 0xeb, 0x92, 0xad, 0xf5, 0x37, 0xf2, 0xc8, 0x5c, 0x3e, 0xcc, 0x3f, 0x5b, 0x18, 0x60, 0x6f, 0x7c, 0xa1, 0x6d,
    0xd6, 0xf5, 0x48, 0xda, 0x71, 0x31, 0xa6, 0x10, 0xb5, 0xc9, 0x31, 0xca, 0xb1, 0x8f, 0x63, 0x11, 0x49, 0x12, 0x10,
    0x83, 0xd4, 0xfb, 0x6b, 0xd1, 0x39, 0x02, 0x0c, 0x79, 0x9b, 0x97, 0x29, 0x87, 0x79, 0x28, 0x0c, 0x29, 0x3e, 0x93,
    0x5d, 0x37, 0x86, 0x69, 0xd8, 0xd6, 0xa1, 0x88, 0x85, 0xb8,
  };

  uint8_t reference_j_1024[32] = {
    0xaf, 0x0c, 0xbd, 0xf5, 0x86, 0x24, 0x62, 0xf2, 0xf0, 0x10, 0x12, 0x7a, 0x87, 0x4e, 0xb8, 0xbd,
    0x89, 0x39, 0xd0, 0x49, 0xd2, 0x8a, 0x10, 0xf1, 0x41, 0x31, 0x1d, 0x2a, 0xe4, 0x81, 0xa7, 0x1a,
  };

  uint8_t* d_z;
  uint8_t* d_c;
  uint8_t* d_j;
  uint8_t h_j[32];

  cudaMalloc(&d_z, 32);
  cudaMalloc(&d_c, 32 * (du * k + dv));
  cudaMalloc(&d_j, 32);

  cudaMemcpy(d_z, reference_z_1024, 32, cudaMemcpyHostToDevice);
  cudaMemcpy(d_c, reference_c_1024, 32 * (du * k + dv), cudaMemcpyHostToDevice);

  test_J_hash_kernel<k, du, dv><<<1, 128>>>(d_z, d_c, d_j);
  cudaMemcpy(h_j, d_j, 32, cudaMemcpyDeviceToHost);

  for (int i = 0; i < 32; i++) {
    EXPECT_EQ(h_j[i], reference_j_1024[i]);
  }

  cudaFree(d_z);
  cudaFree(d_c);
  cudaFree(d_j);
}