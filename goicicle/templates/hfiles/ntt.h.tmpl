#include <stdbool.h>
#include <cuda.h>
// ntt.h

#ifndef _{{.CurveName}}_NTT_H
#define _{{.CurveName}}_NTT_H

#ifdef __cplusplus
extern "C" {
#endif

// Incomplete declaration of {{.CurveName}} projective and affine structs
typedef struct {{.CurveName}}_projective_t {{.CurveName}}_projective_t;
typedef struct {{.CurveName}}_affine_t {{.CurveName}}_affine_t;
typedef struct {{.CurveName}}_scalar_t {{.CurveName}}_scalar_t;

typedef struct {{.CurveName}}_g2_projective_t {{.CurveName}}_g2_projective_t;
typedef struct {{.CurveName}}_g2_affine_t {{.CurveName}}_g2_affine_t;

int ntt_cuda_{{.PackageName}}({{.CurveName}}_scalar_t *arr, uint32_t n, bool inverse, size_t decimation, size_t device_id);
int ntt_batch_cuda_{{.PackageName}}({{.CurveName}}_scalar_t *arr, uint32_t arr_size, uint32_t batch_size, bool inverse, size_t device_id);

int ecntt_cuda_{{.PackageName}}({{.CurveName}}_projective_t *arr, uint32_t n, bool inverse, size_t device_id);
int ecntt_batch_cuda_{{.PackageName}}({{.CurveName}}_projective_t *arr, uint32_t arr_size, uint32_t batch_size, bool inverse, size_t device_id);


{{.CurveName}}_scalar_t* build_domain_cuda_{{.PackageName}}(uint32_t domain_size, uint32_t logn, bool inverse, size_t device_id, size_t stream);
int interpolate_scalars_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t *d_evaluations, {{.CurveName}}_scalar_t *d_domain, unsigned n, unsigned device_id, size_t stream);
int interpolate_scalars_batch_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t* d_evaluations, {{.CurveName}}_scalar_t* d_domain, unsigned n, unsigned batch_size, size_t device_id, size_t stream);
int interpolate_points_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_out, {{.CurveName}}_projective_t *d_evaluations, {{.CurveName}}_scalar_t *d_domain, unsigned n, size_t device_id, size_t stream);
int interpolate_points_batch_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_out, {{.CurveName}}_projective_t* d_evaluations, {{.CurveName}}_scalar_t* d_domain,unsigned n, unsigned batch_size, size_t device_id, size_t stream);
int interpolate_scalars_on_coset_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t* d_evaluations, {{.CurveName}}_scalar_t* d_domain, unsigned n, {{.CurveName}}_scalar_t* coset_powers, size_t device_id, size_t stream);
int interpolate_scalars_batch_on_coset_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t* d_evaluations, {{.CurveName}}_scalar_t* d_domain, unsigned n, unsigned batch_size, {{.CurveName}}_scalar_t* coset_powers, size_t device_id, size_t stream);
int evaluate_scalars_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t *d_coefficients, {{.CurveName}}_scalar_t *d_domain, unsigned domain_size, unsigned n, unsigned device_id, size_t stream);
int evaluate_scalars_batch_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t* d_coefficients, {{.CurveName}}_scalar_t* d_domain, unsigned domain_size,unsigned n, unsigned batch_size, size_t device_id, size_t stream);
int evaluate_points_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_out, {{.CurveName}}_projective_t *d_coefficients, {{.CurveName}}_scalar_t *d_domain, unsigned domain_size, unsigned n, size_t device_id, size_t stream);
int evaluate_points_batch_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_out, {{.CurveName}}_projective_t* d_coefficients, {{.CurveName}}_scalar_t* d_domain, unsigned domain_size,unsigned n, unsigned batch_size, size_t device_id, size_t stream);
int evaluate_scalars_on_coset_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t *d_coefficients, {{.CurveName}}_scalar_t *d_domain, unsigned domain_size,unsigned n, {{.CurveName}}_scalar_t *coset_powers, unsigned device_id, size_t stream);
int evaluate_scalars_on_coset_batch_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t* d_coefficients, {{.CurveName}}_scalar_t* d_domain, unsigned domain_size, unsigned n, unsigned batch_size, {{.CurveName}}_scalar_t *coset_powers, size_t device_id, size_t stream);
int evaluate_points_on_coset_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_out, {{.CurveName}}_projective_t *d_coefficients, {{.CurveName}}_scalar_t *d_domain, unsigned domain_size,unsigned n, {{.CurveName}}_scalar_t *coset_powers, size_t device_id, size_t stream);
int evaluate_points_on_coset_batch_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_out, {{.CurveName}}_projective_t* d_coefficients, {{.CurveName}}_scalar_t* d_domain, unsigned domain_size, unsigned n, unsigned batch_size, {{.CurveName}}_scalar_t *coset_powers, size_t device_id, size_t stream);
int reverse_order_scalars_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* arr, int n, size_t device_id, size_t stream);
int reverse_order_scalars_batch_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* arr, int n, int batch_size, size_t device_id, size_t stream);
int reverse_order_points_cuda_{{.PackageName}}({{.CurveName}}_projective_t* arr, int n, size_t device_id, size_t stream);
int reverse_order_points_batch_cuda_{{.PackageName}}({{.CurveName}}_projective_t* arr, int n, int batch_size, size_t device_id, size_t stream);
int add_scalars_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t* d_in1, {{.CurveName}}_scalar_t* d_in2, unsigned n, size_t stream);
int sub_scalars_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_out, {{.CurveName}}_scalar_t* d_in1, {{.CurveName}}_scalar_t* d_in2, unsigned n, size_t stream);
int to_montgomery_scalars_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_inout, unsigned n, size_t stream);
int from_montgomery_scalars_cuda_{{.PackageName}}({{.CurveName}}_scalar_t* d_inout, unsigned n, size_t stream);

// points g1
int to_montgomery_proj_points_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_inout, unsigned n, size_t stream);
int from_montgomery_proj_points_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_inout, unsigned n, size_t stream);
int to_montgomery_aff_points_cuda_{{.PackageName}}({{.CurveName}}_affine_t* d_inout, unsigned n, size_t stream);
int from_montgomery_aff_points_cuda_{{.PackageName}}({{.CurveName}}_affine_t* d_inout, unsigned n, size_t stream);

// points g2
int to_montgomery_proj_points_g2_cuda_{{.PackageName}}({{.CurveName}}_g2_projective_t* d_inout, unsigned n, size_t stream);
int from_montgomery_proj_points_g2_cuda_{{.PackageName}}({{.CurveName}}_g2_projective_t* d_inout, unsigned n, size_t stream);
int to_montgomery_aff_points_g2_cuda_{{.PackageName}}({{.CurveName}}_g2_affine_t* d_inout, unsigned n, size_t stream);
int from_montgomery_aff_points_g2_cuda_{{.PackageName}}({{.CurveName}}_g2_affine_t* d_inout, unsigned n, size_t stream);

#ifdef __cplusplus
}
#endif

#endif /* _{{.CurveName}}_NTT_H */
