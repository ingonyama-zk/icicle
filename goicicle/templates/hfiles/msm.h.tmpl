#include <stdbool.h>
#include <cuda.h>
#include <cuda_runtime.h>
// msm.h

#ifndef _{{.CurveName}}_MSM_H
#define _{{.CurveName}}_MSM_H

#ifdef __cplusplus
extern "C" {
#endif

// Incomplete declaration of {{.CurveName}} projective and affine structs
typedef struct {{.CurveName}}_projective_t {{.CurveName}}_projective_t;
typedef struct {{.CurveName}}_g2_projective_t {{.CurveName}}_g2_projective_t;
typedef struct {{.CurveName}}_affine_t {{.CurveName}}_affine_t;
typedef struct {{.CurveName}}_g2_affine_t {{.CurveName}}_g2_affine_t;
typedef struct {{.CurveName}}_scalar_t {{.CurveName}}_scalar_t;
typedef cudaStream_t CudaStream_t;

int msm_cuda_{{.PackageName}}({{.CurveName}}_projective_t* out, {{.CurveName}}_affine_t* points,
                   {{.CurveName}}_scalar_t* scalars, size_t count, size_t device_id);

int msm_batch_cuda_{{.PackageName}}({{.CurveName}}_projective_t* out, {{.CurveName}}_affine_t* points,
                         {{.CurveName}}_scalar_t* scalars, size_t batch_size,
                         size_t msm_size, size_t device_id);

int commit_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_out, {{.CurveName}}_scalar_t* d_scalars,
                      {{.CurveName}}_affine_t* d_points, size_t count, unsigned large_bucket_factor, size_t device_id);

int commit_batch_cuda_{{.PackageName}}({{.CurveName}}_projective_t* d_out, {{.CurveName}}_scalar_t* d_scalars,
                            {{.CurveName}}_affine_t* d_points, size_t count,
                            size_t batch_size, size_t device_id);

int msm_g2_cuda_{{.PackageName}}({{.CurveName}}_g2_projective_t *out, {{.CurveName}}_g2_affine_t* points, {{.CurveName}}_scalar_t* scalars, size_t count, size_t device_id);
int msm_batch_g2_cuda_{{.PackageName}}({{.CurveName}}_g2_projective_t* out, {{.CurveName}}_g2_affine_t* points, {{.CurveName}}_scalar_t* scalars, size_t batch_size, size_t msm_size, size_t device_id);
int commit_g2_cuda_{{.PackageName}}({{.CurveName}}_g2_projective_t* d_out, {{.CurveName}}_scalar_t* d_scalars, {{.CurveName}}_g2_affine_t* d_points, size_t count, unsigned large_bucket_factor, size_t device_id);
int commit_batch_g2_cuda_{{.PackageName}}({{.CurveName}}_g2_projective_t* d_out, {{.CurveName}}_scalar_t* d_scalars, {{.CurveName}}_g2_affine_t* d_points, size_t count, size_t batch_size, size_t device_id, cudaStream_t stream);

#ifdef __cplusplus
}
#endif

#endif /* _{{.CurveName}}_MSM_H */
