#include <stdbool.h>
#include <cuda.h>
// ve_mod_mult.h

#ifndef _{{.CurveNameUpperCase}}_VEC_MULT_H
#define _{{.CurveNameUpperCase}}_VEC_MULT_H

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {{.CurveNameUpperCase}}_projective_t {{.CurveNameUpperCase}}_projective_t;
typedef struct {{.CurveNameUpperCase}}_scalar_t {{.CurveNameUpperCase}}_scalar_t;

int32_t vec_mod_mult_point_{{.CurveNameLowerCase}}(
  {{.CurveNameUpperCase}}_projective_t* inout, {{.CurveNameUpperCase}}_scalar_t* scalar_vec, size_t n_elments, size_t device_id);
int32_t vec_mod_mult_scalar_{{.CurveNameLowerCase}}(
  {{.CurveNameUpperCase}}_scalar_t* inout, {{.CurveNameUpperCase}}_scalar_t* scalar_vec, size_t n_elments, size_t device_id);
int32_t vec_mod_mult_device_scalar_{{.CurveNameLowerCase}}(
  {{.CurveNameUpperCase}}_scalar_t* inout, {{.CurveNameUpperCase}}_scalar_t* scalar_vec, size_t n_elements, size_t device_id);
int32_t matrix_vec_mod_mult_{{.CurveNameLowerCase}}(
  {{.CurveNameUpperCase}}_scalar_t* matrix_flattened,
  {{.CurveNameUpperCase}}_scalar_t* input,
  {{.CurveNameUpperCase}}_scalar_t* output,
  size_t n_elments,
  size_t device_id);

#ifdef __cplusplus
}
#endif

#endif /* _{{.CurveNameUpperCase}}_VEC_MULT_H */
