
	// Copyright 2023 Ingonyama
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	
// Code generated by Ingonyama DO NOT EDIT

package bn254

import (
	"encoding/binary"
	"fmt"
	"testing"

	


	"github.com/consensys/gnark-crypto/ecc/bn254"



	

	"github.com/consensys/gnark-crypto/ecc/bn254/fp"



	


	"github.com/consensys/gnark-crypto/ecc/bn254/fr"



	"github.com/stretchr/testify/assert"
)

func TestNewFieldBN254One(t *testing.T) {
	var oneField G1BaseField
	oneField.SetOne()

	rawOneField := [8]uint32([8]uint32{0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0})

	assert.Equal(t, oneField.s, rawOneField)
}

func TestNewFieldBN254Zero(t *testing.T) {
	zeroField := NewFieldZero[G1BaseField]()
	rawZeroField := [8]uint32([8]uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0})

	assert.Equal(t, zeroField.s, rawZeroField)
}

func TestFieldBN254FromGnark(t *testing.T) {
	var rand fr.Element
	rand.SetRandom()

	f := NewFieldFromFrGnark[G1ScalarField](rand)

	assert.Equal(t, f.s, ConvertUint64ArrToUint32Arr(rand.Bits()))
}

func BenchmarkBatchConvertFromFrGnarkThreaded(b *testing.B) {
	// ROUTINES := []int{4,5,6,7,8}

	// for _, routineAmount := range ROUTINES {
	routineAmount := 7
	_, scalars_fr := GenerateScalars(1 << 24, false)
	b.Run(fmt.Sprintf("Convert %d", routineAmount), func(b *testing.B) {
		for n := 0; n < b.N; n++ {
			_ = BatchConvertFromFrGnarkThreaded[G1ScalarField](scalars_fr, routineAmount)
		}
	})
	// }
}

func BenchmarkBatchConvertFromFrGnark(b *testing.B) {
	_, scalars_fr := GenerateScalars(1 << 24, false)
	b.Run("BatchConvert 2^24", func(b *testing.B) {
		for n := 0; n < b.N; n++ {
			_ = BatchConvertFromFrGnark[G1ScalarField](scalars_fr)
		}
	})
}

func TestFieldBN254ToBytesLe(t *testing.T) {
	var rand fr.Element
	rand.SetRandom()

	f := NewFieldFromFrGnark[G1ScalarField](rand)

	expected := make([]byte, len(f.s)*4) // each uint32 takes 4 bytes
	for i, v := range f.s {
		binary.LittleEndian.PutUint32(expected[i*4:], v)
	}

	assert.Equal(t, f.ToBytesLe(), expected)
	assert.Equal(t, len(f.ToBytesLe()), 32)
}

func TestNewPointBN254Zero(t *testing.T) {
	var pointZero G1ProjectivePoint
	pointZero.SetZero()

	var baseOne G1BaseField
	baseOne.SetOne()

	a := new(G1ProjectivePoint)
	a.ToGnarkJac()

	assert.Equal(t, pointZero.x, *NewFieldZero[G1BaseField]())
	assert.Equal(t, pointZero.y, baseOne)
	assert.Equal(t, pointZero.z, *NewFieldZero[G1BaseField]())
}

func TestBN254Eq(t *testing.T) {
	var p1 G1ProjectivePoint
	var p2 G1ProjectivePoint

	p1.SetZero()
	p2.SetZero()
	
	var baseFieldOne G1BaseField
	baseFieldOne.SetOne()

	p3 := &G1ProjectivePoint{
		x: baseFieldOne,
		y: baseFieldOne,
		z: baseFieldOne,
	}

	assert.Equal(t, p1.Eq(&p2), true)
	assert.Equal(t, p1.Eq(p3), false)
}

func TestBN254StripZ(t *testing.T) {
	var p1 G1ProjectivePoint
	p2ZLess := p1.StripZ()

	assert.IsType(t, G1PointAffine{}, *p2ZLess)
	assert.Equal(t, p1.x, p2ZLess.x)
	assert.Equal(t, p1.y, p2ZLess.y)
}

func TestPointBN254FromGnark(t *testing.T) {
	gnarkP, _ := randG1Jac()

	var f G1BaseField
	f.SetOne()
	var p G1ProjectivePoint
	p.FromJacGnark(&gnarkP)

	z_inv := new(fp.Element)
	z_invsq := new(fp.Element)
	z_invq3 := new(fp.Element)
	x := new(fp.Element)
	y := new(fp.Element)

	z_inv.Inverse(&gnarkP.Z)
	z_invsq.Mul(z_inv, z_inv)
	z_invq3.Mul(z_invsq, z_inv)

	x.Mul(&gnarkP.X, z_invsq)
	y.Mul(&gnarkP.Y, z_invq3)

	assert.Equal(t, p.x, *NewFieldFromFpGnark[G1BaseField](*x))
	assert.Equal(t, p.y, *NewFieldFromFpGnark[G1BaseField](*y))
	assert.Equal(t, p.z, f)
}

func TestPointBN254fromLimbs(t *testing.T) {
	gnarkP, _ := randG1Jac()
	var p G1ProjectivePoint
	p.FromJacGnark(&gnarkP)

	x := p.x.Limbs()
	y := p.y.Limbs()
	z := p.z.Limbs()

	xSlice := x[:]
	ySlice := y[:]
	zSlice := z[:]

	var pFromLimbs G1ProjectivePoint
	pFromLimbs.FromLimbs(&xSlice, &ySlice, &zSlice)

	assert.Equal(t, pFromLimbs, p)
}

func TestNewPointAffineNoInfinityBN254Zero(t *testing.T) {
	var zeroP G1PointAffine
	zeroP.SetZero()

	assert.Equal(t, zeroP.x, *NewFieldZero[G1BaseField]())
	assert.Equal(t, zeroP.y, *NewFieldZero[G1BaseField]())
}

func TestPointAffineNoInfinityBN254ToProjective(t *testing.T) {
	gnarkP, _ := randG1Jac()
	var f G1BaseField
	var p G1ProjectivePoint
	
	f.SetOne()
	affine := p.FromJacGnark(&gnarkP).StripZ()
	proj := affine.ToProjective()

	assert.Equal(t, proj.x, affine.x)
	assert.Equal(t, proj.x, affine.x)
	assert.Equal(t, proj.z, f)
}

func TestPointAffineNoInfinityBN254FromLimbs(t *testing.T) {
	// Initialize your test values
	x := [8]uint32{1, 2, 3, 4, 5, 6, 7, 8}
	y := [8]uint32{9, 10, 11, 12, 13, 14, 15, 16}
	xSlice := x[:]
	ySlice := y[:]

	// Execute your function
	var result G1PointAffine
	result.FromLimbs(&xSlice, &ySlice)

	var xBase G1BaseField
	var yBase G1BaseField
	xBase.FromLimbs(x)
	yBase.FromLimbs(y)

	// Define your expected result
	expected := &G1PointAffine{
		x: xBase,
		y: yBase,
	}

	// Test if result is as expected
	assert.Equal(t, result, expected)
}

func TestToGnarkAffine(t *testing.T) {
	gJac, _ := randG1Jac()
	var proj G1ProjectivePoint
	proj.FromJacGnark(&gJac)

	var gAffine bn254.G1Affine
	gAffine.FromJacobian(&gJac)

	affine := *proj.ToGnarkAffine()
	assert.Equal(t, affine, gAffine)
}

func TestGetFixedLimbs(t *testing.T) {
	t.Run("case of valid input of length less than 8", func(t *testing.T) {
		slice := []uint32{1, 2, 3, 4, 5, 6, 7}
		expected := [8]uint32{1, 2, 3, 4, 5, 6, 7, 0}

		result := getFixedLimbs(&slice)
		assert.Equal(t, result, expected)
	})

	t.Run("case of valid input of length 8", func(t *testing.T) {
		slice := []uint32{1, 2, 3, 4, 5, 6, 7, 8}
		expected := [8]uint32{1, 2, 3, 4, 5, 6, 7, 8}

		result := getFixedLimbs(&slice)
		assert.Equal(t, result, expected)
	})

	t.Run("case of empty input", func(t *testing.T) {
		slice := []uint32{}
		expected := [8]uint32{0, 0, 0, 0, 0, 0, 0, 0}

		result := getFixedLimbs(&slice)
		assert.Equal(t, result, expected)
	})

	t.Run("case of input length greater than 8", func(t *testing.T) {
		slice := []uint32{1, 2, 3, 4, 5, 6, 7, 8, 9}

		defer func() {
			if r := recover(); r == nil {
				t.Errorf("the code did not panic")
			}
		}()

		getFixedLimbs(&slice)
	})
}
