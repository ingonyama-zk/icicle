"use strict";(self.webpackChunkicicle_docs=self.webpackChunkicicle_docs||[]).push([[58783],{20256:i=>{i.exports=JSON.parse('{"version":{"pluginId":"default","version":"2.8.0","label":"2.8.0","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-2.8.0","isLast":false,"docsSidebars":{"GettingStartedSidebar":[{"type":"link","label":"Introduction","href":"/2.8.0/","docId":"introduction","unlisted":false},{"type":"category","label":"ICICLE","collapsed":false,"items":[{"type":"link","label":"Getting started","href":"/2.8.0/icicle/introduction","docId":"icicle/introduction","unlisted":false},{"type":"link","label":"ICICLE Core","href":"/2.8.0/icicle/core","docId":"icicle/core","unlisted":false},{"type":"category","label":"Primitives","collapsed":true,"items":[{"type":"link","label":"MSM","href":"/2.8.0/icicle/primitives/msm","docId":"icicle/primitives/msm","unlisted":false},{"type":"link","label":"NTT","href":"/2.8.0/icicle/primitives/ntt","docId":"icicle/primitives/ntt","unlisted":false},{"type":"link","label":"Keccak Hash","href":"/2.8.0/icicle/primitives/keccak","docId":"icicle/primitives/keccak","unlisted":false},{"type":"link","label":"Poseidon Hash","href":"/2.8.0/icicle/primitives/poseidon","docId":"icicle/primitives/poseidon","unlisted":false},{"type":"link","label":"Poseidon2 Hash","href":"/2.8.0/icicle/primitives/poseidon2","docId":"icicle/primitives/poseidon2","unlisted":false}],"collapsible":true,"href":"/2.8.0/icicle/primitives/overview"},{"type":"link","label":"Polynomials","href":"/2.8.0/icicle/polynomials/overview","docId":"icicle/polynomials/overview","unlisted":false},{"type":"link","label":"Multi GPU Support","href":"/2.8.0/icicle/multi-gpu","docId":"icicle/multi-gpu","unlisted":false},{"type":"category","label":"Golang bindings","collapsed":true,"items":[{"type":"category","label":"MSM","collapsed":true,"items":[{"type":"link","label":"MSM pre computation","href":"/2.8.0/icicle/golang-bindings/msm-pre-computation","docId":"icicle/golang-bindings/msm-pre-computation","unlisted":false}],"collapsible":true,"href":"/2.8.0/icicle/golang-bindings/msm"},{"type":"link","label":"NTT","href":"/2.8.0/icicle/golang-bindings/ntt","docId":"icicle/golang-bindings/ntt","unlisted":false},{"type":"link","label":"EC-NTT","href":"/2.8.0/icicle/golang-bindings/ecntt","docId":"icicle/golang-bindings/ecntt","unlisted":false},{"type":"link","label":"Vector operations","href":"/2.8.0/icicle/golang-bindings/vec-ops","docId":"icicle/golang-bindings/vec-ops","unlisted":false},{"type":"link","label":"Keccak Hash","href":"/2.8.0/icicle/golang-bindings/keccak","docId":"icicle/golang-bindings/keccak","unlisted":false},{"type":"link","label":"Multi GPU Support","href":"/2.8.0/icicle/golang-bindings/multi-gpu","docId":"icicle/golang-bindings/multi-gpu","unlisted":false}],"collapsible":true,"href":"/2.8.0/icicle/golang-bindings"},{"type":"category","label":"Rust bindings","collapsed":true,"items":[{"type":"category","label":"MSM","collapsed":true,"items":[{"type":"link","label":"MSM pre computation","href":"/2.8.0/icicle/rust-bindings/msm-pre-computation","docId":"icicle/rust-bindings/msm-pre-computation","unlisted":false}],"collapsible":true,"href":"/2.8.0/icicle/rust-bindings/msm"},{"type":"link","label":"NTT","href":"/2.8.0/icicle/rust-bindings/ntt","docId":"icicle/rust-bindings/ntt","unlisted":false},{"type":"link","label":"EC-NTT","href":"/2.8.0/icicle/rust-bindings/ecntt","docId":"icicle/rust-bindings/ecntt","unlisted":false},{"type":"link","label":"Vector operations","href":"/2.8.0/icicle/rust-bindings/vec-ops","docId":"icicle/rust-bindings/vec-ops","unlisted":false},{"type":"link","label":"Keccak Hash","href":"/2.8.0/icicle/rust-bindings/keccak","docId":"icicle/rust-bindings/keccak","unlisted":false},{"type":"link","label":"Multi GPU Support","href":"/2.8.0/icicle/rust-bindings/multi-gpu","docId":"icicle/rust-bindings/multi-gpu","unlisted":false},{"type":"link","label":"Polynomials","href":"/2.8.0/icicle/rust-bindings/polynomials","docId":"icicle/rust-bindings/polynomials","unlisted":false}],"collapsible":true,"href":"/2.8.0/icicle/rust-bindings"},{"type":"link","label":"Google Colab Instructions","href":"/2.8.0/icicle/colab-instructions","docId":"icicle/colab-instructions","unlisted":false},{"type":"link","label":"ICICLE Provers","href":"/2.8.0/icicle/integrations","docId":"icicle/integrations","unlisted":false}],"collapsible":true,"href":"/2.8.0/icicle/overview"},{"type":"link","label":"ZK Containers","href":"/2.8.0/ZKContainers","docId":"ZKContainers","unlisted":false},{"type":"link","label":"Ingonyama Grant program","href":"/2.8.0/grants","docId":"grants","unlisted":false},{"type":"link","label":"Contributor guide","href":"/2.8.0/contributor-guide","docId":"contributor-guide","unlisted":false},{"type":"category","label":"Additional Resources","collapsed":false,"collapsible":false,"items":[{"type":"link","label":"YouTube","href":"https://www.youtube.com/@ingo_ZK"},{"type":"link","label":"Ingonyama Blog","href":"https://www.ingonyama.com/blog"},{"type":"link","label":"Ingopedia","href":"https://www.ingonyama.com/ingopedia"},{"href":"https://github.com/ingonyama-zk","type":"link","label":"GitHub"}]}]},"docs":{"contributor-guide":{"id":"contributor-guide","title":"Contributor\'s Guide","description":"We welcome all contributions with open arms. At Ingonyama we take a village approach, believing it takes many hands and minds to build a ecosystem.","sidebar":"GettingStartedSidebar"},"grants":{"id":"grants","title":"Ingonyama Grant programs","description":"Ingonyama understands the importance of supporting and fostering a vibrant community of researchers and builders to advance ZK. To encourage progress, we are not only developing in the open but also sharing resources with researchers and builders through various programs.","sidebar":"GettingStartedSidebar"},"icicle/colab-instructions":{"id":"icicle/colab-instructions","title":"Run ICICLE on Google Colab","description":"Google Colab lets you use a GPU free of charge, it\'s an Nvidia T4 GPU with 16 GB of memory, capable of running latest CUDA (tested on Cuda 12.2)","sidebar":"GettingStartedSidebar"},"icicle/core":{"id":"icicle/core","title":"ICICLE Core","description":"ICICLE Core is a library written in C++/CUDA. All the ICICLE primitives are implemented within ICICLE Core.","sidebar":"GettingStartedSidebar"},"icicle/golang-bindings":{"id":"icicle/golang-bindings","title":"Golang bindings","description":"Golang bindings allow you to use ICICLE as a golang library.","sidebar":"GettingStartedSidebar"},"icicle/golang-bindings/ecntt":{"id":"icicle/golang-bindings/ecntt","title":"ECNTT","description":"ECNTT Method","sidebar":"GettingStartedSidebar"},"icicle/golang-bindings/keccak":{"id":"icicle/golang-bindings/keccak","title":"Keccak","description":"Keccak Example","sidebar":"GettingStartedSidebar"},"icicle/golang-bindings/msm":{"id":"icicle/golang-bindings/msm","title":"MSM","description":"MSM Example","sidebar":"GettingStartedSidebar"},"icicle/golang-bindings/msm-pre-computation":{"id":"icicle/golang-bindings/msm-pre-computation","title":"MSM Pre computation","description":"To understand the theory behind MSM pre computation technique refer to Niall Emmart\'s talk.","sidebar":"GettingStartedSidebar"},"icicle/golang-bindings/multi-gpu":{"id":"icicle/golang-bindings/multi-gpu","title":"Multi GPU APIs","description":"To learn more about the theory of Multi GPU programming refer to this part of documentation.","sidebar":"GettingStartedSidebar"},"icicle/golang-bindings/ntt":{"id":"icicle/golang-bindings/ntt","title":"NTT","description":"NTT Example","sidebar":"GettingStartedSidebar"},"icicle/golang-bindings/vec-ops":{"id":"icicle/golang-bindings/vec-ops","title":"Vector Operations","description":"Overview","sidebar":"GettingStartedSidebar"},"icicle/integrations":{"id":"icicle/integrations","title":"ICICLE integrated provers","description":"ICICLE has been used by companies and projects such as Celer Network, Consensys Gnark, EZKL, ZKWASM and others to accelerate their ZK proving pipeline.","sidebar":"GettingStartedSidebar"},"icicle/introduction":{"id":"icicle/introduction","title":"Getting started with ICICLE","description":"This guide is oriented towards developers who want to start writing code with the ICICLE libraries. If you just want to run your existing ZK circuits on GPU refer to this guide please.","sidebar":"GettingStartedSidebar"},"icicle/multi-gpu":{"id":"icicle/multi-gpu","title":"Multi GPU with ICICLE","description":"If you are looking for the Multi GPU API documentation refer here for Rust and here for Golang.","sidebar":"GettingStartedSidebar"},"icicle/overview":{"id":"icicle/overview","title":"What is ICICLE?","description":"ICICLE is a cryptography library for ZK using GPUs. ICICLE implements blazing fast cryptographic primitives such as EC operations, MSM, NTT, Poseidon hash and more on GPU.","sidebar":"GettingStartedSidebar"},"icicle/polynomials/overview":{"id":"icicle/polynomials/overview","title":"Polynomial API Overview","description":"Read our paper on the Polynomials API in ICICLE v2 by clicking here.","sidebar":"GettingStartedSidebar"},"icicle/primitives/keccak":{"id":"icicle/primitives/keccak","title":"Keccak","description":"Keccak is a cryptographic hash function designed by Guido Bertoni, Joan Daemen, Micha\xebl Peeters, and Gilles Van Assche. It was selected as the winner of the NIST hash function competition, becoming the basis for the SHA-3 standard.","sidebar":"GettingStartedSidebar"},"icicle/primitives/msm":{"id":"icicle/primitives/msm","title":"MSM - Multi scalar multiplication","description":"MSM stands for Multi scalar multiplication, its defined as:","sidebar":"GettingStartedSidebar"},"icicle/primitives/ntt":{"id":"icicle/primitives/ntt","title":"NTT - Number Theoretic Transform","description":"The Number Theoretic Transform (NTT) is a variant of the Fourier Transform used over finite fields, particularly those of integers modulo a prime number. NTT operates in a discrete domain and is used primarily in applications requiring modular arithmetic, such as cryptography and polynomial multiplication.","sidebar":"GettingStartedSidebar"},"icicle/primitives/overview":{"id":"icicle/primitives/overview","title":"ICICLE Primitives","description":"This section of the documentation is dedicated to the ICICLE primitives, we will cover the usage and internal details of our primitives such as hashing algorithms, MSM and NTT.","sidebar":"GettingStartedSidebar"},"icicle/primitives/poseidon":{"id":"icicle/primitives/poseidon","title":"Poseidon","description":"Poseidon is a popular hash in the ZK ecosystem primarily because its optimized to work over large prime fields, a common setting for ZK proofs, thereby minimizing the number of multiplicative operations required.","sidebar":"GettingStartedSidebar"},"icicle/primitives/poseidon2":{"id":"icicle/primitives/poseidon2","title":"Poseidon2","description":"Poseidon2 is a recently released optimized version of Poseidon1. The two versions differ in two crucial points. First, Poseidon is a sponge hash function, while Poseidon2 can be either a sponge or a compression function depending on the use case. Secondly, Poseidon2 is instantiated by new and more efficient linear layers with respect to Poseidon. These changes decrease the number of multiplications in the linear layer by up to 90% and the number of constraints in Plonk circuits by up to 70%. This makes Poseidon2 currently the fastest arithmetization-oriented hash function without lookups.","sidebar":"GettingStartedSidebar"},"icicle/rust-bindings":{"id":"icicle/rust-bindings","title":"Rust bindings","description":"Rust bindings allow you to use ICICLE as a rust library.","sidebar":"GettingStartedSidebar"},"icicle/rust-bindings/ecntt":{"id":"icicle/rust-bindings/ecntt","title":"ECNTT","description":"ECNTT Method","sidebar":"GettingStartedSidebar"},"icicle/rust-bindings/keccak":{"id":"icicle/rust-bindings/keccak","title":"Keccak","description":"Keccak Example","sidebar":"GettingStartedSidebar"},"icicle/rust-bindings/msm":{"id":"icicle/rust-bindings/msm","title":"MSM","description":"Example","sidebar":"GettingStartedSidebar"},"icicle/rust-bindings/msm-pre-computation":{"id":"icicle/rust-bindings/msm-pre-computation","title":"MSM Pre computation","description":"To understand the theory behind MSM pre computation technique refer to Niall Emmart\'s talk.","sidebar":"GettingStartedSidebar"},"icicle/rust-bindings/multi-gpu":{"id":"icicle/rust-bindings/multi-gpu","title":"Multi GPU APIs","description":"To learn more about the theory of Multi GPU programming refer to this part of documentation.","sidebar":"GettingStartedSidebar"},"icicle/rust-bindings/ntt":{"id":"icicle/rust-bindings/ntt","title":"NTT","description":"Example","sidebar":"GettingStartedSidebar"},"icicle/rust-bindings/polynomials":{"id":"icicle/rust-bindings/polynomials","title":"Rust FFI Bindings for Univariate Polynomial","description":"Please refer to the Polynomials overview page for a deep overview. This section is a brief description of the Rust FFI bindings.","sidebar":"GettingStartedSidebar"},"icicle/rust-bindings/vec-ops":{"id":"icicle/rust-bindings/vec-ops","title":"Vector Operations API","description":"Our vector operations API which is part of icicle-cuda-runtime package, includes fundamental methods for addition, subtraction, and multiplication of vectors, with support for both host and device memory.","sidebar":"GettingStartedSidebar"},"introduction":{"id":"introduction","title":"","description":"Ingonyama is a next-generation semiconductor company, focusing on Zero-Knowledge Proof hardware acceleration. We build accelerators for advanced cryptography, unlocking real-time applications. Our focus is on democratizing access to compute intensive cryptography and making it accessible for developers to build on top of.","sidebar":"GettingStartedSidebar"},"ZKContainers":{"id":"ZKContainers","title":"ZKContainer","description":"We found that developing ZK provers with ICICLE gives developers the ability to scale ZK provers across many machines and many GPUs. To make this possible we developed the ZKContainer.","sidebar":"GettingStartedSidebar"}}}}')}}]);