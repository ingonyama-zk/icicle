"use strict";(self.webpackChunkicicle_docs=self.webpackChunkicicle_docs||[]).push([[24881],{25810:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"start/intro/start","title":"Overview","description":"ICICLE is a versatile cryptography library supporting multiple compute backends\u2014including CUDA, CPU, Metal, and upcoming backends like WebGPU, Vulkan, and ZPU. It enables you to build cryptographic applications with ease, leveraging the best available hardware for your needs.","source":"@site/versioned_docs/version-3.9.0/start/intro/start.md","sourceDirName":"start/intro","slug":"/","permalink":"/","draft":false,"unlisted":false,"editUrl":"https://github.com/ingonyama-zk/icicle/tree/main/docs/versioned_docs/version-3.9.0/start/intro/start.md","tags":[],"version":"3.9.0","lastUpdatedAt":1750929936000,"frontMatter":{"slug":"/","title":"Overview"},"sidebar":"GettingStartedSidebar","next":{"title":"Setup Guide","permalink":"/setup"}}');var o=i(74848),t=i(28453),a=i(28774);const n={slug:"/",title:"Overview"},c="Introduction to ICICLE",l={},d=[{value:"Overview",id:"overview",level:2},{value:"High-Speed Cryptography",id:"high-speed-cryptography",level:4},{value:"Modular and Extensible Libraries",id:"modular-and-extensible-libraries",level:4},{value:"Cross-Platform and Cross-Language Support",id:"cross-platform-and-cross-language-support",level:4},{value:"What Can You Do with ICICLE?",id:"what-can-you-do-with-icicle",level:2},{value:"Boost Your Prover Performance",id:"boost-your-prover-performance",level:4},{value:"Integrate with Existing Provers",id:"integrate-with-existing-provers",level:4},{value:"Build Custom Provers",id:"build-custom-provers",level:4},{value:"Develop Proof-of-Concepts",id:"develop-proof-of-concepts",level:4},{value:"Ecosystem",id:"ecosystem",level:2}];function p(e){const r={a:"a",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"introduction-to-icicle",children:"Introduction to ICICLE"})}),"\n",(0,o.jsx)(r.p,{children:"ICICLE is a versatile cryptography library supporting multiple compute backends\u2014including CUDA, CPU, Metal, and upcoming backends like WebGPU, Vulkan, and ZPU. It enables you to build cryptographic applications with ease, leveraging the best available hardware for your needs."}),"\n","\n",(0,o.jsxs)("div",{className:"card-grid",children:[(0,o.jsx)(a.A,{to:"/start/architecture/arch_overview",className:"card-link",children:(0,o.jsxs)("div",{className:"card-box",children:[(0,o.jsx)("img",{alt:"Arch Icon",className:"card-icon-left arch-icon"}),(0,o.jsx)("h3",{children:"Architecture"}),(0,o.jsx)("p",{children:"Flexible, extensible framework for cryptographic multi-backend support."})]})}),(0,o.jsx)(a.A,{to:"/start/programmers_guide/general",className:"card-link",children:(0,o.jsxs)("div",{className:"card-box",children:[(0,o.jsx)("img",{alt:"Programmer's Guide Icon",className:"card-icon-left prog-icon"}),(0,o.jsx)("h3",{children:"Programmer's Guide"}),(0,o.jsx)("p",{children:"Step-by-step setup and usage instructions for ICICLE."})]})}),(0,o.jsx)(a.A,{to:"/start/integration-&-support/contributor-guide",className:"card-link",children:(0,o.jsxs)("div",{className:"card-box",children:[(0,o.jsx)("img",{alt:"Integrations & Support Icon",className:"card-icon-left intsup-icon"}),(0,o.jsx)("h3",{children:"Integrations & Support"}),(0,o.jsx)("p",{children:"Broad integrations with strong community and developer support."})]})}),(0,o.jsx)(a.A,{to:"/apioverview",className:"card-link",children:(0,o.jsxs)("div",{className:"card-box",children:[(0,o.jsx)("img",{alt:"API Icon",className:"card-icon-left api-icon"}),(0,o.jsx)("h3",{children:"API"}),(0,o.jsx)("p",{children:"Low-level API docs and language bindings."})]})})]}),"\n",(0,o.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(r.h4,{id:"high-speed-cryptography",children:"High-Speed Cryptography"}),"\n",(0,o.jsx)(r.p,{children:"ICICLE delivers optimized performance for the core building blocks used in modern cryptographic protocols, ensuring efficiency and scalability across diverse use cases."}),"\n",(0,o.jsx)(r.h4,{id:"modular-and-extensible-libraries",children:"Modular and Extensible Libraries"}),"\n",(0,o.jsx)(r.p,{children:"ICICLE includes a comprehensive set of libraries for various fields and curves, and is built for seamless integration and expansion\u2014allowing you to add custom backends or cryptographic primitives as needed."}),"\n",(0,o.jsx)(r.h4,{id:"cross-platform-and-cross-language-support",children:"Cross-Platform and Cross-Language Support"}),"\n",(0,o.jsx)(r.p,{children:"ICICLE works across multiple languages (C++, Rust, Go, potentially Python) and supports development on CPU with deployment across diverse backends, including GPUs, Metal, specialized hardware, and emerging platforms."}),"\n",(0,o.jsx)(r.h2,{id:"what-can-you-do-with-icicle",children:"What Can You Do with ICICLE?"}),"\n",(0,o.jsxs)(r.p,{children:["At Ingonyama, we\u2019re committed to accelerating progress in cryptography\u2014not just through hardware and software, but by supporting the people building with them. Whether you're an engineer, developer, or academic researcher, ",(0,o.jsx)(r.a,{href:"https://www.ingonyama.com/post/ingonyama-research-grant-2025",children:"our grant program"})," can provide access to GPUs or even fund your research."]}),"\n",(0,o.jsx)(r.p,{children:"ICICLE can be used much like any other cryptographic library\u2014with the added benefit of acceleration. Thanks to multiple integrations, it's already proven effective across a range of use cases:"}),"\n",(0,o.jsx)(r.h4,{id:"boost-your-prover-performance",children:"Boost Your Prover Performance"}),"\n",(0,o.jsxs)(r.p,{children:["If you're a circuit developer facing performance bottlenecks, integrating ICICLE into your prover could offer immediate relief. ICICLE is already integrated with popular frameworks like ",(0,o.jsx)(r.a,{href:"https://github.com/Consensys/gnark",children:"Gnark"})," and ",(0,o.jsx)(r.a,{href:"https://github.com/zkonduit/halo2",children:"Halo2"}),", enabling GPU acceleration without requiring changes to your existing code."]}),"\n",(0,o.jsx)(r.h4,{id:"integrate-with-existing-provers",children:"Integrate with Existing Provers"}),"\n",(0,o.jsx)(r.p,{children:"ICICLE supports selective acceleration, allowing you to target and optimize specific bottlenecks in your prover without a full rewrite."}),"\n",(0,o.jsx)(r.h4,{id:"build-custom-provers",children:"Build Custom Provers"}),"\n",(0,o.jsx)(r.p,{children:"If you\u2019re building a prover from scratch, ICICLE offers a powerful foundation for creating optimized, scalable systems. Its ability to scale across multiple GPUs and machines makes it ideal for high-performance environments like data centers."}),"\n",(0,o.jsx)(r.h4,{id:"develop-proof-of-concepts",children:"Develop Proof-of-Concepts"}),"\n",(0,o.jsx)(r.p,{children:"ICICLE is also great for prototyping and smaller projects. With bindings for Golang and Rust, you can quickly build libraries implementing specific cryptographic primitives\u2014like a KZG commitment scheme\u2014with minimal overhead."}),"\n",(0,o.jsx)(r.h2,{id:"ecosystem",children:"Ecosystem"}),"\n",(0,o.jsx)(r.p,{children:"ICICLE is already trusted by leading cryptography teams to supercharge their proving systems. From general-purpose ZK frameworks to specialized proof systems, ICICLE helps teams break performance bottlenecks and scale efficiently."}),"\n",(0,o.jsxs)(r.p,{children:["Below are just a select ",(0,o.jsx)(r.em,{children:"few"})," of the teams building with ICICLE:"]}),"\n",(0,o.jsxs)("div",{className:"ecosystem-grid",children:[(0,o.jsxs)("a",{href:"https://www.ingonyama.com/post/icicle-case-study-accelerating-zk-proofs-with-brevis",className:"ecosystemcard",target:"_blank",rel:"noopener",children:[(0,o.jsx)("img",{src:"/img/brevislogo.png",alt:"Brevis logo"}),(0,o.jsx)("p",{children:"Accelerating proof generation for ZK coprocessors."})]}),(0,o.jsxs)("a",{href:"https://www.eigenda.xyz/",className:"ecosystemcard",target:"_blank",rel:"noopener",children:[(0,o.jsx)("img",{src:"/img/eigendalogo.png",alt:"EigenDA logo"}),(0,o.jsx)("p",{children:"Improving data availability bandwidth, utilizing GPUs to parallelize encoding."})]}),(0,o.jsxs)("a",{href:"https://github.com/Consensys/gnark",className:"ecosystemcard",target:"_blank",rel:"noopener",children:[(0,o.jsx)("img",{src:"/img/gnarklogo.png",alt:"Gnark logo"}),(0,o.jsx)("p",{children:"Speeding up general-purpose zero-knowledge circuits."})]}),(0,o.jsxs)("a",{href:"https://www.ingonyama.com/blog/case-study-accelerating-zircuits-zero-knowledge-proofs-with-icicle",className:"ecosystemcard",target:"_blank",rel:"noopener",children:[(0,o.jsx)("img",{src:"/img/zircuitlogo.png",alt:"Zircuit logo",style:{width:"140px",height:"auto"}}),(0,o.jsx)("p",{children:"Boosting throughput for custom ZK proof systems."})]}),(0,o.jsxs)("a",{href:"https://www.ingonyama.com/blog/how-icicle-helps-grow-the-zkwasm-ecosystem",className:"ecosystemcard",target:"_blank",rel:"noopener",children:[(0,o.jsx)("img",{src:"/img/zkwasmlogo.png",alt:"zkWASM logo",style:{width:"150px",height:"auto"}}),(0,o.jsx)("p",{children:"Powering scalable zkVMs with modular acceleration."})]}),(0,o.jsxs)("a",{href:"https://www.ingonyama.com/blog/icicle-case-study-accelerating-zk-proofs-with-kroma-network",className:"ecosystemcard",target:"_blank",rel:"noopener",children:[(0,o.jsx)("img",{src:"/img/kromalogo.png",alt:"Kroma Network logo",style:{width:"150px",height:"auto"}}),(0,o.jsx)("p",{children:"Accelerating optimistic rollup proof generation."})]})]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,r,i)=>{i.d(r,{R:()=>a,x:()=>n});var s=i(96540);const o={},t=s.createContext(o);function a(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function n(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);