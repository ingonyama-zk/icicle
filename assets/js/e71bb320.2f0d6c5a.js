"use strict";(self.webpackChunkicicle_docs=self.webpackChunkicicle_docs||[]).push([[92545],{88715:(i,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"icicle/primitives/pairings","title":"Pairings in ICICLE","description":"Pairings are a fundamental cryptographic primitive that enable a wide range of advanced cryptographic protocols, including zero-knowledge proofs, identity-based encryption, and more. ICICLE provides efficient implementations of cryptographic pairings optimized for various hardware backends.","source":"@site/versioned_docs/version-3.7.0/icicle/primitives/pairings.md","sourceDirName":"icicle/primitives","slug":"/icicle/primitives/pairings","permalink":"/3.7.0/icicle/primitives/pairings","draft":false,"unlisted":false,"editUrl":"https://github.com/ingonyama-zk/icicle/tree/main/docs/versioned_docs/version-3.7.0/icicle/primitives/pairings.md","tags":[],"version":"3.7.0","lastUpdatedAt":1753347082000,"frontMatter":{"slug":"/icicle/primitives/pairings","title":"Pairings in ICICLE"},"sidebar":"GettingStartedSidebar","previous":{"title":"FRI","permalink":"/3.7.0/icicle/primitives/fri"},"next":{"title":"Golang bindings","permalink":"/3.7.0/icicle/golang-bindings"}}');var s=n(74848),t=n(28453);const a={slug:"/icicle/primitives/pairings",title:"Pairings in ICICLE"},l="Pairings in ICICLE",c={},o=[{value:"What are Pairings?",id:"what-are-pairings",level:2},{value:"Pairing Implementation in ICICLE",id:"pairing-implementation-in-icicle",level:2},{value:"Key Components",id:"key-components",level:3},{value:"Supported Pairing Types",id:"supported-pairing-types",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Further Reading",id:"further-reading",level:2}];function p(i){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...i.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"pairings-in-icicle",children:"Pairings in ICICLE"})}),"\n",(0,s.jsx)(e.p,{children:"Pairings are a fundamental cryptographic primitive that enable a wide range of advanced cryptographic protocols, including zero-knowledge proofs, identity-based encryption, and more. ICICLE provides efficient implementations of cryptographic pairings optimized for various hardware backends."}),"\n",(0,s.jsx)(e.h2,{id:"what-are-pairings",children:"What are Pairings?"}),"\n",(0,s.jsx)(e.p,{children:"A cryptographic pairing is a bilinear map e: G1 \xd7 G2 \u2192 GT, where:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"G1 and G2 are elliptic curve groups"}),"\n",(0,s.jsx)(e.li,{children:"GT is a multiplicative subgroup of a field extension"}),"\n",(0,s.jsx)(e.li,{children:"The map preserves the bilinear property: e(aP, bQ) = e(P,Q)^(ab)"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"This bilinear property makes pairings particularly useful for constructing complex cryptographic protocols."}),"\n",(0,s.jsx)(e.h2,{id:"pairing-implementation-in-icicle",children:"Pairing Implementation in ICICLE"}),"\n",(0,s.jsxs)(e.p,{children:["ICICLE implements pairings through a templated interface that supports different pairing configurations. The main pairing function is defined in ",(0,s.jsx)(e.code,{children:"pairing.h"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"template <typename PairingConfig>\neIcicleError pairing(\n  const typename PairingConfig::G1Affine& p,\n  const typename PairingConfig::G2Affine& q,\n  typename PairingConfig::TargetField* output);\n"})}),"\n",(0,s.jsx)(e.h3,{id:"key-components",children:"Key Components"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"PairingConfig"}),": A configuration type that defines:"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Field definitions"}),"\n",(0,s.jsx)(e.li,{children:"Implementation details"}),"\n",(0,s.jsx)(e.li,{children:"Group types (G1, G2)"}),"\n",(0,s.jsx)(e.li,{children:"Target field type (GT)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Input Points"}),": The pairing takes two input points:"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"p"}),": An affine point in G1"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"q"}),": An affine point in G2"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Output"}),": The result is stored in the target field (GT)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"supported-pairing-types",children:"Supported Pairing Types"}),"\n",(0,s.jsx)(e.p,{children:"Currently, ICICLE supports the following pairing-friendly curves:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"bn254"}),"\n",(0,s.jsx)(e.li,{children:"bls12-381"}),"\n",(0,s.jsx)(e.li,{children:"bls12-377"}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["The specific implementations can be found in the ",(0,s.jsx)(e.code,{children:"models/"})," directory."]}),"\n",(0,s.jsx)(e.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(e.p,{children:"Here's a basic example of how to use pairings in ICICLE:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include "icicle/pairing/pairing.h"\n#include "icicle/pairing/models/bn254.h"\n\n// Initialize points\nBn254::G1Affine p = ...;\nBn254::G2Affine q = ...;\nBn254::TargetField result;\n\n// Compute pairing\neIcicleError err = icicle::pairing<Bn254>(p, q, result);\n'})}),"\n",(0,s.jsx)(e.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/3.7.0/icicle/arch_overview",children:"Architecture Overview"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/3.7.0/icicle/getting_started",children:"Getting Started Guide"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/3.7.0/icicle/programmers_guide/general",children:"Programmer's Guide"})}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"For specific implementation details and advanced usage, refer to the API documentation in the source code."})]})}function d(i={}){const{wrapper:e}={...(0,t.R)(),...i.components};return e?(0,s.jsx)(e,{...i,children:(0,s.jsx)(p,{...i})}):p(i)}},28453:(i,e,n)=>{n.d(e,{R:()=>a,x:()=>l});var r=n(96540);const s={},t=r.createContext(s);function a(i){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof i?i(e):{...e,...i}}),[e,i])}function l(i){let e;return e=i.disableParentContext?"function"==typeof i.components?i.components(s):i.components||s:a(i.components),r.createElement(t.Provider,{value:e},i.children)}}}]);