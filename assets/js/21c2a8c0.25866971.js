"use strict";(self.webpackChunkicicle_docs=self.webpackChunkicicle_docs||[]).push([[67533],{92732:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"start/architecture/arch_overview","title":"Architecture Overview","description":"ICICLE is designed with flexibility and extensibility in mind, offering a robust framework that supports multiple compute backends and accommodates various cryptographic needs. This section provides an overview of ICICLE\'s architecture, highlighting its open and closed components, multi-device support, and extensibility.","source":"@site/versioned_docs/version-3.9.0/start/architecture/arch_overview.md","sourceDirName":"start/architecture","slug":"/start/architecture/arch_overview","permalink":"/start/architecture/arch_overview","draft":false,"unlisted":false,"editUrl":"https://github.com/ingonyama-zk/icicle/tree/main/docs/versioned_docs/version-3.9.0/start/architecture/arch_overview.md","tags":[],"version":"3.9.0","lastUpdatedAt":1749473661000,"frontMatter":{},"sidebar":"GettingStartedSidebar","previous":{"title":"Setup Guide","permalink":"/setup"},"next":{"title":"Build Your Own Backend","permalink":"/start/architecture/build_your_own_backend"}}');var r=t(74848),s=t(28453);const a={},o="Architecture Overview",c={},d=[{value:"Frontend and CPU Backend",id:"frontend-and-cpu-backend",level:3},{value:"CUDA Backend",id:"cuda-backend",level:2},{value:"Multi-Device Support",id:"multi-device-support",level:2},{value:"Build Your Own Backend",id:"build-your-own-backend",level:2}];function l(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,r.jsx)(n.p,{children:"ICICLE is designed with flexibility and extensibility in mind, offering a robust framework that supports multiple compute backends and accommodates various cryptographic needs. This section provides an overview of ICICLE's architecture, highlighting its open and closed components, multi-device support, and extensibility."}),"\n",(0,r.jsx)(n.h3,{id:"frontend-and-cpu-backend",children:"Frontend and CPU Backend"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Frontend (FE):"})," The ICICLE frontend is open-source and provides a unified API across multiple programming languages, including C++, Rust, and Go. It abstracts away the complexity of different backends, enabling developers to write backend-agnostic code that runs seamlessly across various platforms."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CPU Backend:"})," ICICLE includes an open-source CPU backend, enabling development and testing on standard hardware. It\u2019s ideal for prototyping or for use in environments where specialized hardware is unavailable."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"cuda-backend",children:"CUDA Backend"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CUDA Backend:"})," ICICLE also features a high-performance, closed-source CUDA backend optimized for NVIDIA GPUs. It delivers significant acceleration for cryptographic operations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Installation and Licensing:"})," The CUDA backend must be downloaded and installed separately. For detailed instructions, refer to the ",(0,r.jsx)(n.a,{href:"./install_gpu_backend",children:"installation guide"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"multi-device-support",children:"Multi-Device Support"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scalability:"})," ICICLE supports multi-device configurations, allowing workloads to be distributed across multiple GPUs or other hardware accelerators. This enables scalable ZK proof generation and other cryptographic operations in data centers and high-performance computing environments."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"build-your-own-backend",children:"Build Your Own Backend"}),"\n",(0,r.jsx)(n.p,{children:"ICICLE is designed with a modular architecture that allows developers to integrate new backends or customize existing ones to meet their specific requirements. The architecture supports:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Custom Backends:"})," Developers can build their own backends to target specific hardware or optimize for particular use cases. The integration process is outlined in the ",(0,r.jsx)(n.a,{href:"/start/architecture/build_your_own_backend",children:"Build Your Own Backend"})," section."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pluggable Components:"})," ICICLE\u2019s architecture supports the seamless integration of additional cryptographic primitives and enhancements, enabling the framework to evolve alongside advances in cryptography and hardware acceleration."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);