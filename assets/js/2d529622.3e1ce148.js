"use strict";(self.webpackChunkicicle_docs=self.webpackChunkicicle_docs||[]).push([[99253],{42943:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"icicle/primitives/serialization","title":"Serialization","description":"Interface Description","source":"@site/versioned_docs/version-3.8.0/icicle/primitives/serialization.md","sourceDirName":"icicle/primitives","slug":"/icicle/primitives/serialization","permalink":"/3.8.0/icicle/primitives/serialization","draft":false,"unlisted":false,"editUrl":"https://github.com/ingonyama-zk/icicle/tree/main/docs/versioned_docs/version-3.8.0/icicle/primitives/serialization.md","tags":[],"version":"3.8.0","lastUpdatedAt":1752156613000,"frontMatter":{},"sidebar":"GettingStartedSidebar","previous":{"title":"Pairings","permalink":"/3.8.0/icicle/primitives/pairings"},"next":{"title":"Golang bindings","permalink":"/3.8.0/icicle/golang-bindings"}}');var n=r(74848),t=r(28453);const c={},o="Serialization",a={},l=[{value:"Interface Description",id:"interface-description",level:2},{value:"Example Usage",id:"example-usage",level:2}];function d(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"serialization",children:"Serialization"})}),"\n",(0,n.jsx)(i.h2,{id:"interface-description",children:"Interface Description"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"BinarySerializer"})," interface provides methods for serializing and deserializing objects. It is a template class that can be used with various types. The primary methods include:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"static eIcicleError serialized_size(const T& obj, size_t& size)"}),": Calculates the size required to serialize the object ",(0,n.jsx)(i.code,{children:"obj"})," and stores it in ",(0,n.jsx)(i.code,{children:"size"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"static eIcicleError serialize(std::byte* buffer, size_t buffer_length, const T& obj)"}),": Serializes the object ",(0,n.jsx)(i.code,{children:"obj"})," into the provided ",(0,n.jsx)(i.code,{children:"buffer"})," of length ",(0,n.jsx)(i.code,{children:"buffer_length"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"static eIcicleError deserialize(const std::byte* buffer, size_t buffer_length, T& obj)"}),": Deserializes the data from the ",(0,n.jsx)(i.code,{children:"buffer"})," into the object ",(0,n.jsx)(i.code,{children:"obj"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["These methods return an ",(0,n.jsx)(i.code,{children:"eIcicleError"})," indicating success or failure of the operation. Proper error handling should be implemented to ensure robustness."]}),"\n",(0,n.jsx)(i.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,n.jsxs)(i.p,{children:["Here is an example of how to use the ",(0,n.jsx)(i.code,{children:"BinarySerializer"})," for serialization and deserialization:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-cpp",children:'#include "icicle/serialization.h"\n#include "sumcheck/sumcheck_proof.h"\n\n// Assume sumcheck_proof is an instance of SumcheckProof<scalar_t>\nSumcheckProof<scalar_t> sumcheck_proof;\n\n// Calculate serialized size\nsize_t proof_size = 0;\nICICLE_CHECK(BinarySerializer<SumcheckProof<scalar_t>>::serialized_size(sumcheck_proof, proof_size));\n\n// Serialize the proof\nstd::vector<std::byte> proof_bytes(proof_size);\nICICLE_CHECK(BinarySerializer<SumcheckProof<scalar_t>>::serialize(proof_bytes.data(), proof_bytes.size(), sumcheck_proof));\n\n// Deserialize the proof\nSumcheckProof<scalar_t> deserialized_proof;\nICICLE_CHECK(BinarySerializer<SumcheckProof<scalar_t>>::deserialize(proof_bytes.data(), proof_bytes.size(), deserialized_proof));\n\n'})}),"\n",(0,n.jsx)(i.p,{children:"This example demonstrates calculating the serialized size, performing serialization, and then deserialization."})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,i,r)=>{r.d(i,{R:()=>c,x:()=>o});var s=r(96540);const n={},t=s.createContext(n);function c(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);