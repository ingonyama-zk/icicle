"use strict";(self.webpackChunkicicle_docs=self.webpackChunkicicle_docs||[]).push([[33121],{31826:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/rust-bindings/ecntt","title":"ECNTT","description":"ECNTT Method","source":"@site/versioned_docs/version-3.9.0/api/rust-bindings/ecntt.md","sourceDirName":"api/rust-bindings","slug":"/api/rust-bindings/ecntt","permalink":"/3.9.0/api/rust-bindings/ecntt","draft":false,"unlisted":false,"editUrl":"https://github.com/ingonyama-zk/icicle/tree/main/docs/versioned_docs/version-3.9.0/api/rust-bindings/ecntt.md","tags":[],"version":"3.9.0","lastUpdatedAt":1753347082000,"frontMatter":{},"sidebar":"apisidebar","previous":{"title":"NTT","permalink":"/3.9.0/api/rust-bindings/ntt"},"next":{"title":"Vector operations","permalink":"/3.9.0/api/rust-bindings/vec-ops"}}');var r=t(74848),s=t(28453);const c={},o="ECNTT",d={},l=[{value:"ECNTT Method",id:"ecntt-method",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ecntt",children:"ECNTT"})}),"\n",(0,r.jsx)(n.h2,{id:"ecntt-method",children:"ECNTT Method"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ecntt"})," function computes the Elliptic Curve Number Theoretic Transform (EC-NTT) or its inverse on a batch of points of a curve."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub fn ecntt<C: Curve>(\n    input: &(impl HostOrDeviceSlice<Projective<C>> + ?Sized),\n    dir: NTTDir,\n    cfg: &NTTConfig<C::ScalarField>,\n    output: &mut (impl HostOrDeviceSlice<Projective<C>> + ?Sized),\n) -> Result<(), eIcicleError>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"input"})}),": The input data as a slice of ",(0,r.jsx)(n.code,{children:"Projective<C>"}),". This represents points on a specific elliptic curve ",(0,r.jsx)(n.code,{children:"C"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dir"})}),": The direction of the NTT. It can be ",(0,r.jsx)(n.code,{children:"NTTDir::kForward"})," for forward NTT or ",(0,r.jsx)(n.code,{children:"NTTDir::kInverse"})," for inverse NTT."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"cfg"})}),": The NTT configuration object of type ",(0,r.jsx)(n.code,{children:"NTTConfig<C::ScalarField>"}),". This object specifies parameters for the NTT computation, such as the batch size and algorithm to use."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"output"})}),": The output buffer to write the results into. This should be a slice of ",(0,r.jsx)(n.code,{children:"Projective<C>"})," with the same size as the input."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"Result<(), eIcicleError>"})}),": This function returns an ",(0,r.jsx)(n.code,{children:"eIcicleError"})," which is a wrapper type that indicates success or failure of the NTT computation. On success, it contains ",(0,r.jsx)(n.code,{children:"Ok(())"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function c(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);